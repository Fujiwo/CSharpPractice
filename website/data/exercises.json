[
  {
    "id": "exercise01",
    "directory": "Exercise01",
    "title": "Exercise 01: 基本的なコンソール出力 (難易度: 1)",
    "difficulty": 1,
    "description": "C#の基本的なコンソール出力を学習します。",
    "readme": "# Exercise 01: 基本的なコンソール出力 (難易度: 1)\n\n## 概要\nC#の基本的なコンソール出力を学習します。\n\n## 問題\n\n### 問題 1-1 (難易度: 1)\n「Hello, World!」をコンソールに出力するプログラムを作成してください。\n\n**要求事項:**\n- Console.WriteLine()メソッドを使用する\n- 出力は「Hello, World!」である\n\n### 問題 1-2 (難易度: 1)\n自分の名前を含む挨拶メッセージをコンソールに出力するプログラムを作成してください。\n\n**要求事項:**\n- 「こんにちは、[あなたの名前]です！」の形式で出力する\n- Console.WriteLine()メソッドを使用する\n\n### 問題 1-3 (難易度: 1)\n複数行にわたってメッセージを出力するプログラムを作成してください。\n\n**要求事項:**\n- 1行目: 「C#プログラミングの学習を始めます」\n- 2行目: 「頑張りましょう！」\n- 各行はConsole.WriteLine()を使用して出力する",
    "solutions": [
      {
        "filename": "Problem1-1.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 1-1: \"Hello, World!\" を出力\n        Console.WriteLine(\"Hello, World!\");\n    }\n}"
      },
      {
        "filename": "Problem1-2.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 1-2: 名前を含む挨拶メッセージを出力\n        Console.WriteLine(\"こんにちは、田中太郎です！\");\n    }\n}"
      },
      {
        "filename": "Problem1-3.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 1-3: 複数行のメッセージを出力\n        Console.WriteLine(\"C#プログラミングの学習を始めます\");\n        Console.WriteLine(\"頑張りましょう！\");\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise02",
    "directory": "Exercise02",
    "title": "Exercise 02: 変数と基本データ型 (難易度: 1-2)",
    "difficulty": 1,
    "description": "C#の基本的な変数とデータ型について学習します。",
    "readme": "# Exercise 02: 変数と基本データ型 (難易度: 1-2)\n\n## 概要\nC#の基本的な変数とデータ型について学習します。\n\n## 問題\n\n### 問題 2-1 (難易度: 1)\n異なるデータ型の変数を宣言し、それぞれに値を代入して出力するプログラムを作成してください。\n\n**要求事項:**\n- int型の変数（年齢）\n- string型の変数（名前）\n- double型の変数（身長）\n- bool型の変数（学生かどうか）\n- 各変数の値をコンソールに出力する\n\n### 問題 2-2 (難易度: 2)\nユーザーから入力を受け取り、その値を変数に格納して計算結果を出力するプログラムを作成してください。\n\n**要求事項:**\n- 2つの整数をユーザーから入力として受け取る\n- 加算、減算、乗算、除算の結果を計算する\n- 計算結果をコンソールに出力する\n\n### 問題 2-3 (難易度: 2)\n文字列の操作を行うプログラムを作成してください。\n\n**要求事項:**\n- 姓と名を別々の変数に格納する\n- 文字列の連結を使用してフルネームを作成する\n- フルネームの文字数を出力する\n- フルネームを大文字に変換して出力する",
    "solutions": [
      {
        "filename": "Problem2-1.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 2-1: 異なるデータ型の変数を宣言し、値を代入して出力\n        int age = 25;\n        string name = \"田中太郎\";\n        double height = 175.5;\n        bool isStudent = true;\n        \n        Console.WriteLine($\"名前: {name}\");\n        Console.WriteLine($\"年齢: {age}歳\");\n        Console.WriteLine($\"身長: {height}cm\");\n        Console.WriteLine($\"学生: {isStudent}\");\n    }\n}"
      },
      {
        "filename": "Problem2-2.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 2-2: ユーザーから入力を受け取り、計算結果を出力\n        Console.Write(\"1つ目の整数を入力してください: \");\n        int num1 = int.Parse(Console.ReadLine());\n        \n        Console.Write(\"2つ目の整数を入力してください: \");\n        int num2 = int.Parse(Console.ReadLine());\n        \n        int addition = num1 + num2;\n        int subtraction = num1 - num2;\n        int multiplication = num1 * num2;\n        double division = (double)num1 / num2;\n        \n        Console.WriteLine($\"加算: {num1} + {num2} = {addition}\");\n        Console.WriteLine($\"減算: {num1} - {num2} = {subtraction}\");\n        Console.WriteLine($\"乗算: {num1} * {num2} = {multiplication}\");\n        Console.WriteLine($\"除算: {num1} / {num2} = {division:F2}\");\n    }\n}"
      },
      {
        "filename": "Problem2-3.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 2-3: 文字列の操作\n        string firstName = \"太郎\";\n        string lastName = \"田中\";\n        \n        // 文字列の連結\n        string fullName = lastName + \" \" + firstName;\n        \n        // フルネームの文字数\n        int nameLength = fullName.Length;\n        \n        // フルネームを大文字に変換\n        string upperCaseName = fullName.ToUpper();\n        \n        Console.WriteLine($\"フルネーム: {fullName}\");\n        Console.WriteLine($\"文字数: {nameLength}文字\");\n        Console.WriteLine($\"大文字: {upperCaseName}\");\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise03",
    "directory": "Exercise03",
    "title": "Exercise 03: 条件分岐とif文 (難易度: 2)",
    "difficulty": 2,
    "description": "C#の条件分岐（if文、switch文）について学習します。",
    "readme": "# Exercise 03: 条件分岐とif文 (難易度: 2)\n\n## 概要\nC#の条件分岐（if文、switch文）について学習します。\n\n## 問題\n\n### 問題 3-1 (難易度: 2)\n年齢を入力して、年齢層を判定するプログラムを作成してください。\n\n**要求事項:**\n- ユーザーから年齢を入力として受け取る\n- 以下の条件で年齢層を判定する：\n  - 0-12歳: 「子供」\n  - 13-19歳: 「十代」\n  - 20-64歳: 「大人」\n  - 65歳以上: 「シニア」\n- 判定結果をコンソールに出力する\n\n### 問題 3-2 (難易度: 2)\n点数を入力して、成績評価を行うプログラムを作成してください。\n\n**要求事項:**\n- ユーザーから点数（0-100）を入力として受け取る\n- 以下の条件で成績を評価する：\n  - 90-100点: 「A」\n  - 80-89点: 「B」\n  - 70-79点: 「C」\n  - 60-69点: 「D」\n  - 0-59点: 「F」\n- switch文を使用して判定する\n\n### 問題 3-3 (難易度: 2)\n三つの数値の中から最大値を見つけるプログラムを作成してください。\n\n**要求事項:**\n- 3つの整数をユーザーから入力として受け取る\n- if文を使用して最大値を判定する\n- 最大値をコンソールに出力する",
    "solutions": [
      {
        "filename": "Problem3-1.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 3-1: 年齢を入力して年齢層を判定\n        Console.Write(\"年齢を入力してください: \");\n        int age = int.Parse(Console.ReadLine());\n        \n        if (age >= 0 && age <= 12)\n        {\n            Console.WriteLine(\"子供\");\n        }\n        else if (age >= 13 && age <= 19)\n        {\n            Console.WriteLine(\"十代\");\n        }\n        else if (age >= 20 && age <= 64)\n        {\n            Console.WriteLine(\"大人\");\n        }\n        else if (age >= 65)\n        {\n            Console.WriteLine(\"シニア\");\n        }\n        else\n        {\n            Console.WriteLine(\"無効な年齢です\");\n        }\n    }\n}"
      },
      {
        "filename": "Problem3-2.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 3-2: 点数を入力して成績評価\n        Console.Write(\"点数を入力してください（0-100）: \");\n        int score = int.Parse(Console.ReadLine());\n        \n        string grade = score switch\n        {\n            >= 90 and <= 100 => \"A\",\n            >= 80 and < 90 => \"B\",\n            >= 70 and < 80 => \"C\",\n            >= 60 and < 70 => \"D\",\n            >= 0 and < 60 => \"F\",\n            _ => \"無効な点数\"\n        };\n        \n        Console.WriteLine($\"成績: {grade}\");\n    }\n}"
      },
      {
        "filename": "Problem3-3.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 3-3: 三つの数値の中から最大値を見つける\n        Console.Write(\"1つ目の数値を入力してください: \");\n        int num1 = int.Parse(Console.ReadLine());\n        \n        Console.Write(\"2つ目の数値を入力してください: \");\n        int num2 = int.Parse(Console.ReadLine());\n        \n        Console.Write(\"3つ目の数値を入力してください: \");\n        int num3 = int.Parse(Console.ReadLine());\n        \n        int max = num1;\n        \n        if (num2 > max)\n        {\n            max = num2;\n        }\n        \n        if (num3 > max)\n        {\n            max = num3;\n        }\n        \n        Console.WriteLine($\"最大値: {max}\");\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise04",
    "directory": "Exercise04",
    "title": "Exercise 04: ループ処理 (難易度: 2-3)",
    "difficulty": 2,
    "description": "C#のループ処理（for文、while文、foreach文）について学習します。",
    "readme": "# Exercise 04: ループ処理 (難易度: 2-3)\n\n## 概要\nC#のループ処理（for文、while文、foreach文）について学習します。\n\n## 問題\n\n### 問題 4-1 (難易度: 2)\n1から10までの数値を出力するプログラムを作成してください。\n\n**要求事項:**\n- for文を使用する\n- 各数値を改行して出力する\n- 最後に「完了」と出力する\n\n### 問題 4-2 (難易度: 3)\n九九の表を出力するプログラムを作成してください。\n\n**要求事項:**\n- ネストしたfor文を使用する\n- 「2 × 3 = 6」の形式で出力する\n- 1の段から9の段まで出力する\n\n### 問題 4-3 (難易度: 3)\nユーザーが0を入力するまで、入力された数値の合計を計算するプログラムを作成してください。\n\n**要求事項:**\n- while文を使用する\n- ユーザーから数値を繰り返し入力として受け取る\n- 0が入力されたらループを終了し、合計を出力する\n- 入力された数値の個数も出力する",
    "solutions": [
      {
        "filename": "Problem4-1.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 4-1: 1から10までの数値を出力\n        for (int i = 1; i <= 10; i++)\n        {\n            Console.WriteLine(i);\n        }\n        Console.WriteLine(\"完了\");\n    }\n}"
      },
      {
        "filename": "Problem4-2.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 4-2: 九九の表を出力\n        for (int i = 1; i <= 9; i++)\n        {\n            Console.WriteLine($\"--- {i}の段 ---\");\n            for (int j = 1; j <= 9; j++)\n            {\n                int result = i * j;\n                Console.WriteLine($\"{i} × {j} = {result}\");\n            }\n            Console.WriteLine(); // 空行\n        }\n    }\n}"
      },
      {
        "filename": "Problem4-3.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 4-3: 0が入力されるまで数値の合計を計算\n        int sum = 0;\n        int count = 0;\n        int input;\n        \n        Console.WriteLine(\"数値を入力してください（0で終了）:\");\n        \n        while (true)\n        {\n            Console.Write(\"数値: \");\n            input = int.Parse(Console.ReadLine());\n            \n            if (input == 0)\n            {\n                break;\n            }\n            \n            sum += input;\n            count++;\n        }\n        \n        Console.WriteLine($\"合計: {sum}\");\n        Console.WriteLine($\"入力された数値の個数: {count}\");\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise05",
    "directory": "Exercise05",
    "title": "Exercise 05: 配列とコレクション (難易度: 2-3)",
    "difficulty": 2,
    "description": "C#の配列とコレクション（List<T>）について学習します。",
    "readme": "# Exercise 05: 配列とコレクション (難易度: 2-3)\n\n## 概要\nC#の配列とコレクション（List<T>）について学習します。\n\n## 問題\n\n### 問題 5-1 (難易度: 2)\n整数の配列を作成し、その配列の要素の合計と平均を計算するプログラムを作成してください。\n\n**要求事項:**\n- 10個の整数を格納する配列を作成する\n- 配列に任意の値を代入する\n- 合計値と平均値を計算して出力する\n- foreach文を使用して配列を処理する\n\n### 問題 5-2 (難易度: 3)\n文字列のリストを作成し、特定の条件でフィルタリングするプログラムを作成してください。\n\n**要求事項:**\n- 果物の名前を格納するList<string>を作成する\n- 「りんご」「バナナ」「オレンジ」「ぶどう」「いちご」を追加する\n- 3文字以上の果物名だけを抽出して表示する\n- 抽出された果物の個数も表示する\n\n### 問題 5-3 (難易度: 3)\n二次元配列を使用して、学生の成績表を作成するプログラムを作成してください。\n\n**要求事項:**\n- 3人の学生、3科目の成績を格納する二次元配列を作成する\n- 各学生の平均点を計算する\n- 各科目の平均点を計算する\n- 結果を表形式で出力する",
    "solutions": [
      {
        "filename": "Problem5-1.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 5-1: 整数配列の合計と平均を計算\n        int[] numbers = { 10, 25, 33, 47, 52, 68, 71, 89, 94, 100 };\n        \n        int sum = 0;\n        \n        Console.WriteLine(\"配列の要素:\");\n        foreach (int number in numbers)\n        {\n            Console.Write(number + \" \");\n            sum += number;\n        }\n        \n        double average = (double)sum / numbers.Length;\n        \n        Console.WriteLine();\n        Console.WriteLine($\"合計: {sum}\");\n        Console.WriteLine($\"平均: {average:F2}\");\n    }\n}"
      },
      {
        "filename": "Problem5-2.cs",
        "content": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 5-2: 文字列のリストをフィルタリング\n        List<string> fruits = new List<string>\n        {\n            \"りんご\", \"バナナ\", \"オレンジ\", \"ぶどう\", \"いちご\"\n        };\n        \n        Console.WriteLine(\"全ての果物:\");\n        foreach (string fruit in fruits)\n        {\n            Console.WriteLine(fruit);\n        }\n        \n        Console.WriteLine(\"\\n3文字以上の果物:\");\n        List<string> filteredFruits = new List<string>();\n        \n        foreach (string fruit in fruits)\n        {\n            if (fruit.Length >= 3)\n            {\n                filteredFruits.Add(fruit);\n                Console.WriteLine(fruit);\n            }\n        }\n        \n        Console.WriteLine($\"\\n3文字以上の果物の個数: {filteredFruits.Count}\");\n    }\n}"
      },
      {
        "filename": "Problem5-3.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 5-3: 二次元配列を使用した学生成績表\n        int[,] scores = {\n            { 85, 92, 78 }, // 学生1: 国語, 数学, 英語\n            { 76, 88, 91 }, // 学生2: 国語, 数学, 英語\n            { 92, 85, 89 }  // 学生3: 国語, 数学, 英語\n        };\n        \n        string[] subjects = { \"国語\", \"数学\", \"英語\" };\n        \n        Console.WriteLine(\"学生成績表\");\n        Console.WriteLine(\"学生\\\\科目\\t国語\\t数学\\t英語\\t平均\");\n        Console.WriteLine(\"----------------------------------------\");\n        \n        // 各学生の平均点を計算\n        for (int student = 0; student < 3; student++)\n        {\n            int total = 0;\n            Console.Write($\"学生{student + 1}\\t\\t\");\n            \n            for (int subject = 0; subject < 3; subject++)\n            {\n                Console.Write($\"{scores[student, subject]}\\t\");\n                total += scores[student, subject];\n            }\n            \n            double average = (double)total / 3;\n            Console.WriteLine($\"{average:F1}\");\n        }\n        \n        Console.WriteLine(\"----------------------------------------\");\n        \n        // 各科目の平均点を計算\n        Console.Write(\"科目平均\\t\\t\");\n        for (int subject = 0; subject < 3; subject++)\n        {\n            int total = 0;\n            for (int student = 0; student < 3; student++)\n            {\n                total += scores[student, subject];\n            }\n            double average = (double)total / 3;\n            Console.Write($\"{average:F1}\\t\");\n        }\n        Console.WriteLine();\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise06",
    "directory": "Exercise06",
    "title": "Exercise 06: メソッドと関数 (難易度: 3)",
    "difficulty": 3,
    "description": "C#のメソッド（関数）の作成と使用について学習します。",
    "readme": "# Exercise 06: メソッドと関数 (難易度: 3)\n\n## 概要\nC#のメソッド（関数）の作成と使用について学習します。\n\n## 問題\n\n### 問題 6-1 (難易度: 3)\n電卓の基本的な機能を実装するメソッドを作成してください。\n\n**要求事項:**\n- 加算、減算、乗算、除算を行うメソッドを作成する\n- 各メソッドは2つのdouble型パラメータを受け取り、double型の結果を返す\n- メインメソッドでユーザー入力を受け取り、適切なメソッドを呼び出す\n- 除算では0で割る場合のエラーハンドリングを行う\n\n### 問題 6-2 (難易度: 3)\n数値の配列を受け取り、統計情報を計算するメソッドを作成してください。\n\n**要求事項:**\n- 最大値を求めるメソッド\n- 最小値を求めるメソッド\n- 平均値を求めるメソッド\n- 各メソッドはint[]型の配列を受け取る\n- メインメソッドで配列を作成し、各統計情報を表示する\n\n### 問題 6-3 (難易度: 3)\n文字列の操作を行うメソッドを作成してください。\n\n**要求事項:**\n- 文字列を逆順にするメソッド\n- 文字列が回文かどうかを判定するメソッド\n- 文字列の中の母音の数を数えるメソッド\n- メインメソッドで各メソッドをテストする\n\n### 問題 6-4 (難易度: 3)\n再帰メソッドを使用して数学的計算を行うプログラムを作成してください。\n\n**要求事項:**\n- 階乗を計算する再帰メソッド\n- フィボナッチ数列のn番目を求める再帰メソッド\n- 数値の桁数を数える再帰メソッド\n- メインメソッドで各メソッドをテストし、結果を表示する\n\n### 問題 6-5 (難易度: 3)\nメソッドのオーバーロードを実装してください。\n\n**要求事項:**\n- Calculateメソッドを以下の形でオーバーロードする：\n  - 2つのint型パラメータで加算\n  - 3つのint型パラメータで加算\n  - 2つのdouble型パラメータで加算\n  - string型とint型パラメータで文字列を指定回数繰り返し\n- メインメソッドで各オーバーロードをテストする\n\n### 問題 6-6 (難易度: 4)\n配列操作の各種メソッドを作成してください。\n\n**要求事項:**\n- 配列をソートするメソッド（バブルソート）\n- 配列から重複を削除するメソッド\n- 配列を逆順にするメソッド\n- 配列の要素を検索するメソッド（線形検索）\n- メインメソッドで各メソッドをテストし、結果を表示する\n\n### 問題 6-7 (難易度: 4)\nパスワード検証システムを作成してください。\n\n**要求事項:**\n- パスワードの長さをチェックするメソッド（8文字以上）\n- 大文字・小文字・数字が含まれているかチェックするメソッド\n- 特殊文字が含まれているかチェックするメソッド\n- 総合的なパスワード強度を判定するメソッド\n- メインメソッドでユーザー入力を受け取り、各検証を行う\n\n### 問題 6-8 (難易度: 4)\n数学計算ユーティリティメソッド群を作成してください。\n\n**要求事項:**\n- 最大公約数を求めるメソッド\n- 最小公倍数を求めるメソッド\n- 素数判定を行うメソッド\n- 指定した範囲の素数を全て求めるメソッド\n- 数値が完全数かどうか判定するメソッド\n- メインメソッドで各メソッドをテストし、結果を表示する",
    "solutions": [
      {
        "filename": "Problem6-1.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 6-1: 電卓の基本機能を実装\n        Console.WriteLine(\"電卓プログラム\");\n        Console.Write(\"1つ目の数値を入力してください: \");\n        double num1 = double.Parse(Console.ReadLine());\n        \n        Console.Write(\"2つ目の数値を入力してください: \");\n        double num2 = double.Parse(Console.ReadLine());\n        \n        Console.WriteLine($\"加算: {num1} + {num2} = {Add(num1, num2)}\");\n        Console.WriteLine($\"減算: {num1} - {num2} = {Subtract(num1, num2)}\");\n        Console.WriteLine($\"乗算: {num1} * {num2} = {Multiply(num1, num2)}\");\n        \n        if (num2 != 0)\n        {\n            Console.WriteLine($\"除算: {num1} / {num2} = {Divide(num1, num2)}\");\n        }\n        else\n        {\n            Console.WriteLine(\"除算: エラー - 0で割ることはできません\");\n        }\n    }\n    \n    static double Add(double a, double b)\n    {\n        return a + b;\n    }\n    \n    static double Subtract(double a, double b)\n    {\n        return a - b;\n    }\n    \n    static double Multiply(double a, double b)\n    {\n        return a * b;\n    }\n    \n    static double Divide(double a, double b)\n    {\n        if (b == 0)\n        {\n            throw new DivideByZeroException(\"0で割ることはできません\");\n        }\n        return a / b;\n    }\n}"
      },
      {
        "filename": "Problem6-2.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 6-2: 数値配列の統計情報を計算\n        int[] numbers = { 15, 32, 8, 47, 91, 23, 6, 78, 54, 12 };\n        \n        Console.WriteLine(\"配列の要素:\");\n        foreach (int number in numbers)\n        {\n            Console.Write(number + \" \");\n        }\n        Console.WriteLine();\n        \n        int max = FindMax(numbers);\n        int min = FindMin(numbers);\n        double average = FindAverage(numbers);\n        \n        Console.WriteLine($\"最大値: {max}\");\n        Console.WriteLine($\"最小値: {min}\");\n        Console.WriteLine($\"平均値: {average:F2}\");\n    }\n    \n    static int FindMax(int[] array)\n    {\n        int max = array[0];\n        foreach (int value in array)\n        {\n            if (value > max)\n            {\n                max = value;\n            }\n        }\n        return max;\n    }\n    \n    static int FindMin(int[] array)\n    {\n        int min = array[0];\n        foreach (int value in array)\n        {\n            if (value < min)\n            {\n                min = value;\n            }\n        }\n        return min;\n    }\n    \n    static double FindAverage(int[] array)\n    {\n        int sum = 0;\n        foreach (int value in array)\n        {\n            sum += value;\n        }\n        return (double)sum / array.Length;\n    }\n}"
      },
      {
        "filename": "Problem6-3.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 6-3: 文字列の操作を行うメソッド\n        string testString1 = \"こんにちは\";\n        string testString2 = \"しんぶんし\"; // 回文\n        string testString3 = \"Hello World\";\n        \n        Console.WriteLine($\"元の文字列: {testString1}\");\n        Console.WriteLine($\"逆順: {ReverseString(testString1)}\");\n        Console.WriteLine($\"回文かどうか: {IsPalindrome(testString1)}\");\n        Console.WriteLine();\n        \n        Console.WriteLine($\"元の文字列: {testString2}\");\n        Console.WriteLine($\"逆順: {ReverseString(testString2)}\");\n        Console.WriteLine($\"回文かどうか: {IsPalindrome(testString2)}\");\n        Console.WriteLine();\n        \n        Console.WriteLine($\"元の文字列: {testString3}\");\n        Console.WriteLine($\"逆順: {ReverseString(testString3)}\");\n        Console.WriteLine($\"母音の数: {CountVowels(testString3)}\");\n    }\n    \n    static string ReverseString(string input)\n    {\n        char[] chars = input.ToCharArray();\n        Array.Reverse(chars);\n        return new string(chars);\n    }\n    \n    static bool IsPalindrome(string input)\n    {\n        string reversed = ReverseString(input);\n        return input.Equals(reversed, StringComparison.OrdinalIgnoreCase);\n    }\n    \n    static int CountVowels(string input)\n    {\n        int count = 0;\n        string vowels = \"aeiouAEIOU\";\n        \n        foreach (char c in input)\n        {\n            if (vowels.Contains(c))\n            {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"
      },
      {
        "filename": "Problem6-4.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 6-4: 再帰メソッドを使用した数学的計算\n        Console.WriteLine(\"再帰メソッドのテスト\");\n        \n        // 階乗のテスト\n        int factorialNum = 5;\n        Console.WriteLine($\"{factorialNum}! = {Factorial(factorialNum)}\");\n        \n        // フィボナッチ数列のテスト\n        int fibNum = 10;\n        Console.WriteLine($\"フィボナッチ数列の{fibNum}番目: {Fibonacci(fibNum)}\");\n        \n        // 桁数計算のテスト\n        int digitNum = 12345;\n        Console.WriteLine($\"{digitNum}の桁数: {CountDigits(digitNum)}\");\n        \n        // より大きな数での桁数テスト\n        digitNum = 987654321;\n        Console.WriteLine($\"{digitNum}の桁数: {CountDigits(digitNum)}\");\n    }\n    \n    static int Factorial(int n)\n    {\n        if (n <= 1)\n        {\n            return 1;\n        }\n        return n * Factorial(n - 1);\n    }\n    \n    static int Fibonacci(int n)\n    {\n        if (n <= 1)\n        {\n            return n;\n        }\n        return Fibonacci(n - 1) + Fibonacci(n - 2);\n    }\n    \n    static int CountDigits(int n)\n    {\n        if (n == 0)\n        {\n            return 1;\n        }\n        if (n < 10)\n        {\n            return 1;\n        }\n        return 1 + CountDigits(n / 10);\n    }\n}"
      },
      {
        "filename": "Problem6-5.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 6-5: メソッドのオーバーロード\n        Console.WriteLine(\"メソッドオーバーロードのテスト\");\n        \n        // 2つのint値の加算\n        Console.WriteLine($\"Calculate(5, 3) = {Calculate(5, 3)}\");\n        \n        // 3つのint値の加算\n        Console.WriteLine($\"Calculate(5, 3, 2) = {Calculate(5, 3, 2)}\");\n        \n        // 2つのdouble値の加算\n        Console.WriteLine($\"Calculate(5.5, 3.2) = {Calculate(5.5, 3.2)}\");\n        \n        // 文字列の繰り返し\n        Console.WriteLine($\"Calculate(\\\"Hello\\\", 3) = {Calculate(\"Hello\", 3)}\");\n        Console.WriteLine($\"Calculate(\\\"*\\\", 5) = {Calculate(\"*\", 5)}\");\n    }\n    \n    // 2つのint型パラメータで加算\n    static int Calculate(int a, int b)\n    {\n        return a + b;\n    }\n    \n    // 3つのint型パラメータで加算\n    static int Calculate(int a, int b, int c)\n    {\n        return a + b + c;\n    }\n    \n    // 2つのdouble型パラメータで加算\n    static double Calculate(double a, double b)\n    {\n        return a + b;\n    }\n    \n    // 文字列を指定回数繰り返し\n    static string Calculate(string text, int count)\n    {\n        string result = \"\";\n        for (int i = 0; i < count; i++)\n        {\n            result += text;\n        }\n        return result;\n    }\n}"
      },
      {
        "filename": "Problem6-6.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 6-6: 配列操作の各種メソッド\n        int[] testArray = {64, 34, 25, 12, 22, 11, 90, 25, 12};\n        \n        Console.WriteLine(\"元の配列:\");\n        PrintArray(testArray);\n        \n        // ソートのテスト\n        int[] sortedArray = (int[])testArray.Clone();\n        BubbleSort(sortedArray);\n        Console.WriteLine(\"\\nソート後:\");\n        PrintArray(sortedArray);\n        \n        // 重複削除のテスト\n        int[] uniqueArray = RemoveDuplicates(testArray);\n        Console.WriteLine(\"\\n重複削除後:\");\n        PrintArray(uniqueArray);\n        \n        // 配列を逆順にするテスト\n        int[] reversedArray = (int[])testArray.Clone();\n        ReverseArray(reversedArray);\n        Console.WriteLine(\"\\n逆順:\");\n        PrintArray(reversedArray);\n        \n        // 検索のテスト\n        int searchValue = 25;\n        int index = LinearSearch(testArray, searchValue);\n        Console.WriteLine($\"\\n値 {searchValue} のインデックス: {index}\");\n        \n        searchValue = 99;\n        index = LinearSearch(testArray, searchValue);\n        Console.WriteLine($\"値 {searchValue} のインデックス: {index} (見つからない場合は-1)\");\n    }\n    \n    static void BubbleSort(int[] array)\n    {\n        int n = array.Length;\n        for (int i = 0; i < n - 1; i++)\n        {\n            for (int j = 0; j < n - i - 1; j++)\n            {\n                if (array[j] > array[j + 1])\n                {\n                    // 要素を交換\n                    int temp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = temp;\n                }\n            }\n        }\n    }\n    \n    static int[] RemoveDuplicates(int[] array)\n    {\n        int[] tempArray = new int[array.Length];\n        int uniqueCount = 0;\n        \n        for (int i = 0; i < array.Length; i++)\n        {\n            bool isDuplicate = false;\n            for (int j = 0; j < uniqueCount; j++)\n            {\n                if (array[i] == tempArray[j])\n                {\n                    isDuplicate = true;\n                    break;\n                }\n            }\n            if (!isDuplicate)\n            {\n                tempArray[uniqueCount] = array[i];\n                uniqueCount++;\n            }\n        }\n        \n        // 実際のサイズに合わせて配列を作成\n        int[] result = new int[uniqueCount];\n        for (int i = 0; i < uniqueCount; i++)\n        {\n            result[i] = tempArray[i];\n        }\n        return result;\n    }\n    \n    static void ReverseArray(int[] array)\n    {\n        int start = 0;\n        int end = array.Length - 1;\n        \n        while (start < end)\n        {\n            // 要素を交換\n            int temp = array[start];\n            array[start] = array[end];\n            array[end] = temp;\n            \n            start++;\n            end--;\n        }\n    }\n    \n    static int LinearSearch(int[] array, int value)\n    {\n        for (int i = 0; i < array.Length; i++)\n        {\n            if (array[i] == value)\n            {\n                return i;\n            }\n        }\n        return -1; // 見つからない場合\n    }\n    \n    static void PrintArray(int[] array)\n    {\n        Console.Write(\"[\");\n        for (int i = 0; i < array.Length; i++)\n        {\n            Console.Write(array[i]);\n            if (i < array.Length - 1)\n            {\n                Console.Write(\", \");\n            }\n        }\n        Console.WriteLine(\"]\");\n    }\n}"
      },
      {
        "filename": "Problem6-7.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 6-7: パスワード検証システム\n        Console.WriteLine(\"パスワード検証システム\");\n        Console.WriteLine(\"パスワードを入力してください:\");\n        \n        string password = Console.ReadLine();\n        \n        Console.WriteLine(\"\\n=== パスワード検証結果 ===\");\n        \n        // 各検証の実行\n        bool lengthOk = CheckPasswordLength(password);\n        Console.WriteLine($\"長さチェック (8文字以上): {(lengthOk ? \"OK\" : \"NG\")}\");\n        \n        bool hasUpper = HasUpperCase(password);\n        Console.WriteLine($\"大文字チェック: {(hasUpper ? \"OK\" : \"NG\")}\");\n        \n        bool hasLower = HasLowerCase(password);\n        Console.WriteLine($\"小文字チェック: {(hasLower ? \"OK\" : \"NG\")}\");\n        \n        bool hasDigit = HasDigit(password);\n        Console.WriteLine($\"数字チェック: {(hasDigit ? \"OK\" : \"NG\")}\");\n        \n        bool hasSpecial = HasSpecialCharacter(password);\n        Console.WriteLine($\"特殊文字チェック: {(hasSpecial ? \"OK\" : \"NG\")}\");\n        \n        // 総合判定\n        string strength = GetPasswordStrength(password);\n        Console.WriteLine($\"\\nパスワード強度: {strength}\");\n    }\n    \n    static bool CheckPasswordLength(string password)\n    {\n        return password != null && password.Length >= 8;\n    }\n    \n    static bool HasUpperCase(string password)\n    {\n        if (password == null) return false;\n        \n        foreach (char c in password)\n        {\n            if (char.IsUpper(c))\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    static bool HasLowerCase(string password)\n    {\n        if (password == null) return false;\n        \n        foreach (char c in password)\n        {\n            if (char.IsLower(c))\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    static bool HasDigit(string password)\n    {\n        if (password == null) return false;\n        \n        foreach (char c in password)\n        {\n            if (char.IsDigit(c))\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    static bool HasSpecialCharacter(string password)\n    {\n        if (password == null) return false;\n        \n        string specialChars = \"!@#$%^&*()_+-=[]{}|;:,.<>?\";\n        \n        foreach (char c in password)\n        {\n            if (specialChars.Contains(c.ToString()))\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    static string GetPasswordStrength(string password)\n    {\n        if (password == null) return \"無効\";\n        \n        int score = 0;\n        \n        if (CheckPasswordLength(password)) score++;\n        if (HasUpperCase(password)) score++;\n        if (HasLowerCase(password)) score++;\n        if (HasDigit(password)) score++;\n        if (HasSpecialCharacter(password)) score++;\n        \n        switch (score)\n        {\n            case 0:\n            case 1:\n                return \"非常に弱い\";\n            case 2:\n                return \"弱い\";\n            case 3:\n                return \"普通\";\n            case 4:\n                return \"強い\";\n            case 5:\n                return \"非常に強い\";\n            default:\n                return \"不明\";\n        }\n    }\n}"
      },
      {
        "filename": "Problem6-8.cs",
        "content": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 6-8: 数学計算ユーティリティメソッド群\n        Console.WriteLine(\"数学計算ユーティリティのテスト\");\n        \n        // 最大公約数のテスト\n        int a = 48, b = 18;\n        Console.WriteLine($\"{a}と{b}の最大公約数: {GetGCD(a, b)}\");\n        \n        // 最小公倍数のテスト\n        Console.WriteLine($\"{a}と{b}の最小公倍数: {GetLCM(a, b)}\");\n        \n        // 素数判定のテスト\n        int[] testNumbers = {2, 7, 15, 17, 25, 29};\n        Console.WriteLine(\"\\n素数判定:\");\n        foreach (int num in testNumbers)\n        {\n            Console.WriteLine($\"{num}: {(IsPrime(num) ? \"素数\" : \"合成数\")}\");\n        }\n        \n        // 指定範囲の素数を取得\n        int start = 10, end = 30;\n        int[] primes = GetPrimesInRange(start, end);\n        Console.WriteLine($\"\\n{start}から{end}までの素数:\");\n        Console.Write(\"[\");\n        for (int i = 0; i < primes.Length; i++)\n        {\n            Console.Write(primes[i]);\n            if (i < primes.Length - 1) Console.Write(\", \");\n        }\n        Console.WriteLine(\"]\");\n        \n        // 完全数判定のテスト\n        int[] perfectTestNumbers = {6, 28, 12, 496};\n        Console.WriteLine(\"\\n完全数判定:\");\n        foreach (int num in perfectTestNumbers)\n        {\n            Console.WriteLine($\"{num}: {(IsPerfectNumber(num) ? \"完全数\" : \"完全数ではない\")}\");\n        }\n    }\n    \n    static int GetGCD(int a, int b)\n    {\n        // ユークリッドの互除法\n        while (b != 0)\n        {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return Math.Abs(a);\n    }\n    \n    static int GetLCM(int a, int b)\n    {\n        // 最小公倍数 = (a * b) / 最大公約数\n        return Math.Abs(a * b) / GetGCD(a, b);\n    }\n    \n    static bool IsPrime(int number)\n    {\n        if (number <= 1)\n        {\n            return false;\n        }\n        if (number <= 3)\n        {\n            return true;\n        }\n        if (number % 2 == 0 || number % 3 == 0)\n        {\n            return false;\n        }\n        \n        // 5から√nまでの奇数で割り切れるかチェック\n        for (int i = 5; i * i <= number; i += 6)\n        {\n            if (number % i == 0 || number % (i + 2) == 0)\n            {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    static int[] GetPrimesInRange(int start, int end)\n    {\n        List<int> primes = new List<int>();\n        \n        for (int i = start; i <= end; i++)\n        {\n            if (IsPrime(i))\n            {\n                primes.Add(i);\n            }\n        }\n        \n        return primes.ToArray();\n    }\n    \n    static bool IsPerfectNumber(int number)\n    {\n        if (number <= 1)\n        {\n            return false;\n        }\n        \n        int sum = 1; // 1は常に約数\n        \n        // 2から√numberまでの約数を見つける\n        for (int i = 2; i * i <= number; i++)\n        {\n            if (number % i == 0)\n            {\n                sum += i;\n                // i * i != numberの場合、number/iも約数\n                if (i * i != number)\n                {\n                    sum += number / i;\n                }\n            }\n        }\n        \n        return sum == number;\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise07",
    "directory": "Exercise07",
    "title": "Exercise 07: クラスとオブジェクト (難易度: 3-4)",
    "difficulty": 3,
    "description": "C#のクラスとオブジェクト指向プログラミングの基礎について学習します。",
    "readme": "# Exercise 07: クラスとオブジェクト (難易度: 3-4)\n\n## 概要\nC#のクラスとオブジェクト指向プログラミングの基礎について学習します。\n\n## 問題\n\n### 問題 7-1 (難易度: 3)\n学生の情報を管理するクラスを作成してください。\n\n**要求事項:**\n- Studentクラスを作成する\n- プロパティ: Name (string), Age (int), Grade (double)\n- コンストラクタで初期値を設定する\n- 学生情報を表示するメソッドを作成する\n- メインメソッドで複数の学生オブジェクトを作成し、情報を表示する\n\n### 問題 7-2 (難易度: 4)\n銀行口座を管理するクラスを作成してください。\n\n**要求事項:**\n- BankAccountクラスを作成する\n- プロパティ: AccountNumber (string), Balance (decimal), Owner (string)\n- メソッド: Deposit(預金), Withdraw(引き出し), GetBalance(残高照会)\n- 残高不足の場合はエラーメッセージを表示する\n- メインメソッドで口座を作成し、各操作をテストする\n\n### 問題 7-3 (難易度: 4)\n図形の面積を計算するクラス群を作成してください。\n\n**要求事項:**\n- Rectangleクラス（長方形）: Width, Height プロパティ、CalculateArea メソッド\n- Circleクラス（円）: Radius プロパティ、CalculateArea メソッド\n- 各クラスに適切なコンストラクタを実装する\n- メインメソッドで各図形の面積を計算して表示する\n\n### 問題 7-4 (難易度: 4)\n在庫管理システムを作成してください。\n\n**要求事項:**\n- Productクラス: Id, Name, Price, Stock プロパティ\n- InventoryManagerクラス: 商品の追加、在庫更新、検索機能\n- メソッド: AddProduct, UpdateStock, FindProduct, GetLowStockProducts\n- メインメソッドで各機能をテストする\n- 在庫が少ない商品（5個以下）を警告表示する\n\n### 問題 7-5 (難易度: 4)\n従業員管理システムを作成してください。\n\n**要求事項:**\n- Employeeクラス: Id, Name, Department, Salary プロパティ\n- FullTimeEmployeeクラス: Employee継承、固定給与\n- PartTimeEmployeeクラス: Employee継承、時給計算機能\n- 各クラスに適切なコンストラクタとCalculatePay メソッドを実装\n- メインメソッドで様々な従業員を作成し、給与を計算・表示する\n\n### 問題 7-6 (難易度: 4)\n図書館の本管理システムを作成してください。\n\n**要求事項:**\n- Bookクラス: Title, Author, ISBN, IsAvailable プロパティ\n- Libraryクラス: 本の管理機能\n- メソッド: AddBook, BorrowBook, ReturnBook, SearchByTitle, SearchByAuthor\n- 貸出状況の管理（利用可能/貸出中）\n- メインメソッドで図書館システムをテストする\n\n### 問題 7-7 (難易度: 4)\nショッピングカートシステムを作成してください。\n\n**要求事項:**\n- Itemクラス: Name, Price, Quantity プロパティ\n- ShoppingCartクラス: アイテムの管理機能\n- メソッド: AddItem, RemoveItem, UpdateQuantity, CalculateTotal, ApplyDiscount\n- 割引機能（10%、20%など）\n- メインメソッドでカートの操作をテストし、合計金額を表示する\n\n### 問題 7-8 (難易度: 4)\n動物の分類システムを作成してください。\n\n**要求事項:**\n- Animalクラス（基底クラス）: Name, Age プロパティ、MakeSound 仮想メソッド\n- Dogクラス、Catクラス、Birdクラス（Animal継承）\n- 各動物クラスでMakeSoundメソッドをオーバーライド\n- AnimalShelterクラス: 動物の管理機能\n- メソッド: AddAnimal, GetAllAnimals, GetAnimalsByType\n- メインメソッドで動物シェルターをテストし、各動物の鳴き声を表示する",
    "solutions": [
      {
        "filename": "Problem7-1.cs",
        "content": "using System;\n\nclass Student\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public double Grade { get; set; }\n    \n    public Student(string name, int age, double grade)\n    {\n        Name = name;\n        Age = age;\n        Grade = grade;\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"名前: {Name}\");\n        Console.WriteLine($\"年齢: {Age}歳\");\n        Console.WriteLine($\"成績: {Grade}点\");\n        Console.WriteLine(\"-------------------\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 7-1: 学生情報を管理するクラス\n        Student student1 = new Student(\"田中太郎\", 20, 85.5);\n        Student student2 = new Student(\"佐藤花子\", 19, 92.0);\n        Student student3 = new Student(\"鈴木次郎\", 21, 78.3);\n        \n        Console.WriteLine(\"学生情報一覧:\");\n        student1.DisplayInfo();\n        student2.DisplayInfo();\n        student3.DisplayInfo();\n    }\n}"
      },
      {
        "filename": "Problem7-2.cs",
        "content": "using System;\n\nclass BankAccount\n{\n    public string AccountNumber { get; private set; }\n    public decimal Balance { get; private set; }\n    public string Owner { get; private set; }\n    \n    public BankAccount(string accountNumber, string owner, decimal initialBalance = 0)\n    {\n        AccountNumber = accountNumber;\n        Owner = owner;\n        Balance = initialBalance;\n    }\n    \n    public void Deposit(decimal amount)\n    {\n        if (amount > 0)\n        {\n            Balance += amount;\n            Console.WriteLine($\"{amount:C}を預金しました。残高: {Balance:C}\");\n        }\n        else\n        {\n            Console.WriteLine(\"預金額は0より大きい値を入力してください。\");\n        }\n    }\n    \n    public void Withdraw(decimal amount)\n    {\n        if (amount > 0)\n        {\n            if (Balance >= amount)\n            {\n                Balance -= amount;\n                Console.WriteLine($\"{amount:C}を引き出しました。残高: {Balance:C}\");\n            }\n            else\n            {\n                Console.WriteLine(\"残高不足です。引き出しできません。\");\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"引き出し額は0より大きい値を入力してください。\");\n        }\n    }\n    \n    public decimal GetBalance()\n    {\n        Console.WriteLine($\"現在の残高: {Balance:C}\");\n        return Balance;\n    }\n    \n    public void DisplayAccountInfo()\n    {\n        Console.WriteLine($\"口座番号: {AccountNumber}\");\n        Console.WriteLine($\"口座名義: {Owner}\"); \n        Console.WriteLine($\"残高: {Balance:C}\");\n        Console.WriteLine(\"-------------------\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 7-2: 銀行口座を管理するクラス\n        BankAccount account = new BankAccount(\"12345-678\", \"田中太郎\", 10000);\n        \n        Console.WriteLine(\"口座情報:\");\n        account.DisplayAccountInfo();\n        \n        Console.WriteLine(\"\\n取引開始:\");\n        account.Deposit(5000);\n        account.Withdraw(3000);\n        account.Withdraw(15000); // 残高不足のテスト\n        account.GetBalance();\n    }\n}"
      },
      {
        "filename": "Problem7-3.cs",
        "content": "using System;\n\nclass Rectangle\n{\n    public double Width { get; set; }\n    public double Height { get; set; }\n    \n    public Rectangle(double width, double height)\n    {\n        Width = width;\n        Height = height;\n    }\n    \n    public double CalculateArea()\n    {\n        return Width * Height;\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"長方形 - 幅: {Width}, 高さ: {Height}\");\n        Console.WriteLine($\"面積: {CalculateArea()}\");\n    }\n}\n\nclass Circle\n{\n    public double Radius { get; set; }\n    \n    public Circle(double radius)\n    {\n        Radius = radius;\n    }\n    \n    public double CalculateArea()\n    {\n        return Math.PI * Radius * Radius;\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"円 - 半径: {Radius}\");\n        Console.WriteLine($\"面積: {CalculateArea():F2}\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 7-3: 図形の面積を計算するクラス群\n        Rectangle rectangle1 = new Rectangle(5.0, 3.0);\n        Rectangle rectangle2 = new Rectangle(7.5, 4.2);\n        \n        Circle circle1 = new Circle(3.0);\n        Circle circle2 = new Circle(5.5);\n        \n        Console.WriteLine(\"図形の面積計算:\");\n        Console.WriteLine(\"================\");\n        \n        rectangle1.DisplayInfo();\n        Console.WriteLine();\n        \n        rectangle2.DisplayInfo();\n        Console.WriteLine();\n        \n        circle1.DisplayInfo();\n        Console.WriteLine();\n        \n        circle2.DisplayInfo();\n    }\n}"
      },
      {
        "filename": "Problem7-4.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public int Stock { get; set; }\n    \n    public Product(int id, string name, decimal price, int stock)\n    {\n        Id = id;\n        Name = name;\n        Price = price;\n        Stock = stock;\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"ID: {Id}, 商品名: {Name}, 価格: {Price:C}, 在庫: {Stock}個\");\n    }\n}\n\nclass InventoryManager\n{\n    private List<Product> products;\n    \n    public InventoryManager()\n    {\n        products = new List<Product>();\n    }\n    \n    public void AddProduct(Product product)\n    {\n        products.Add(product);\n        Console.WriteLine($\"商品 '{product.Name}' を追加しました。\");\n    }\n    \n    public void UpdateStock(int productId, int newStock)\n    {\n        Product product = FindProduct(productId);\n        if (product != null)\n        {\n            product.Stock = newStock;\n            Console.WriteLine($\"商品ID {productId} の在庫を {newStock} 個に更新しました。\");\n        }\n        else\n        {\n            Console.WriteLine($\"商品ID {productId} が見つかりません。\");\n        }\n    }\n    \n    public Product FindProduct(int productId)\n    {\n        return products.FirstOrDefault(p => p.Id == productId);\n    }\n    \n    public List<Product> GetLowStockProducts()\n    {\n        return products.Where(p => p.Stock <= 5).ToList();\n    }\n    \n    public void DisplayAllProducts()\n    {\n        Console.WriteLine(\"\\n=== 全商品一覧 ===\");\n        foreach (Product product in products)\n        {\n            product.DisplayInfo();\n        }\n    }\n    \n    public void DisplayLowStockWarning()\n    {\n        List<Product> lowStockProducts = GetLowStockProducts();\n        if (lowStockProducts.Count > 0)\n        {\n            Console.WriteLine(\"\\n⚠️ 在庫警告（5個以下）:\");\n            foreach (Product product in lowStockProducts)\n            {\n                product.DisplayInfo();\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"\\n在庫不足の商品はありません。\");\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 7-4: 在庫管理システム\n        InventoryManager manager = new InventoryManager();\n        \n        // 商品を追加\n        manager.AddProduct(new Product(1, \"ノートPC\", 80000, 10));\n        manager.AddProduct(new Product(2, \"マウス\", 2500, 3));\n        manager.AddProduct(new Product(3, \"キーボード\", 5000, 8));\n        manager.AddProduct(new Product(4, \"モニター\", 25000, 2));\n        \n        // 全商品表示\n        manager.DisplayAllProducts();\n        \n        // 在庫更新\n        Console.WriteLine(\"\\n=== 在庫更新 ===\");\n        manager.UpdateStock(2, 15);\n        manager.UpdateStock(4, 1);\n        \n        // 商品検索\n        Console.WriteLine(\"\\n=== 商品検索 ===\");\n        Product found = manager.FindProduct(3);\n        if (found != null)\n        {\n            Console.WriteLine(\"検索結果:\");\n            found.DisplayInfo();\n        }\n        \n        // 在庫警告表示\n        manager.DisplayLowStockWarning();\n    }\n}"
      },
      {
        "filename": "Problem7-5.cs",
        "content": "using System;\n\nabstract class Employee\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Department { get; set; }\n    \n    public Employee(int id, string name, string department)\n    {\n        Id = id;\n        Name = name;\n        Department = department;\n    }\n    \n    public virtual void DisplayInfo()\n    {\n        Console.WriteLine($\"ID: {Id}, 名前: {Name}, 部署: {Department}\");\n    }\n    \n    public abstract decimal CalculatePay();\n}\n\nclass FullTimeEmployee : Employee\n{\n    public decimal Salary { get; set; }\n    \n    public FullTimeEmployee(int id, string name, string department, decimal salary) \n        : base(id, name, department)\n    {\n        Salary = salary;\n    }\n    \n    public override decimal CalculatePay()\n    {\n        return Salary;\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo();\n        Console.WriteLine($\"雇用形態: 正社員, 月給: {Salary:C}\");\n    }\n}\n\nclass PartTimeEmployee : Employee\n{\n    public decimal HourlyRate { get; set; }\n    public int HoursWorked { get; set; }\n    \n    public PartTimeEmployee(int id, string name, string department, decimal hourlyRate, int hoursWorked) \n        : base(id, name, department)\n    {\n        HourlyRate = hourlyRate;\n        HoursWorked = hoursWorked;\n    }\n    \n    public override decimal CalculatePay()\n    {\n        return HourlyRate * HoursWorked;\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo();\n        Console.WriteLine($\"雇用形態: パートタイム, 時給: {HourlyRate:C}, 労働時間: {HoursWorked}時間\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 7-5: 従業員管理システム\n        Console.WriteLine(\"従業員管理システム\");\n        \n        // 正社員を作成\n        FullTimeEmployee fullTime1 = new FullTimeEmployee(1, \"田中太郎\", \"開発部\", 300000);\n        FullTimeEmployee fullTime2 = new FullTimeEmployee(2, \"佐藤花子\", \"営業部\", 280000);\n        \n        // パートタイム従業員を作成\n        PartTimeEmployee partTime1 = new PartTimeEmployee(3, \"鈴木次郎\", \"総務部\", 1200, 80);\n        PartTimeEmployee partTime2 = new PartTimeEmployee(4, \"高橋美咲\", \"開発部\", 1500, 120);\n        \n        // 従業員配列を作成\n        Employee[] employees = { fullTime1, fullTime2, partTime1, partTime2 };\n        \n        Console.WriteLine(\"\\n=== 従業員情報と給与計算 ===\");\n        decimal totalPayroll = 0;\n        \n        foreach (Employee employee in employees)\n        {\n            employee.DisplayInfo();\n            decimal pay = employee.CalculatePay();\n            Console.WriteLine($\"支給額: {pay:C}\");\n            Console.WriteLine(\"-------------------\");\n            totalPayroll += pay;\n        }\n        \n        Console.WriteLine($\"総給与支給額: {totalPayroll:C}\");\n    }\n}"
      },
      {
        "filename": "Problem7-6.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Book\n{\n    public string Title { get; set; }\n    public string Author { get; set; }\n    public string ISBN { get; set; }\n    public bool IsAvailable { get; set; }\n    \n    public Book(string title, string author, string isbn)\n    {\n        Title = title;\n        Author = author;\n        ISBN = isbn;\n        IsAvailable = true;\n    }\n    \n    public void DisplayInfo()\n    {\n        string status = IsAvailable ? \"利用可能\" : \"貸出中\";\n        Console.WriteLine($\"タイトル: {Title}\");\n        Console.WriteLine($\"著者: {Author}\");\n        Console.WriteLine($\"ISBN: {ISBN}\");\n        Console.WriteLine($\"状態: {status}\");\n        Console.WriteLine(\"-------------------\");\n    }\n}\n\nclass Library\n{\n    private List<Book> books;\n    \n    public Library()\n    {\n        books = new List<Book>();\n    }\n    \n    public void AddBook(Book book)\n    {\n        books.Add(book);\n        Console.WriteLine($\"本 '{book.Title}' を図書館に追加しました。\");\n    }\n    \n    public bool BorrowBook(string isbn)\n    {\n        Book book = books.FirstOrDefault(b => b.ISBN == isbn);\n        if (book == null)\n        {\n            Console.WriteLine($\"ISBN {isbn} の本が見つかりません。\");\n            return false;\n        }\n        \n        if (!book.IsAvailable)\n        {\n            Console.WriteLine($\"'{book.Title}' は既に貸出中です。\");\n            return false;\n        }\n        \n        book.IsAvailable = false;\n        Console.WriteLine($\"'{book.Title}' を貸し出しました。\");\n        return true;\n    }\n    \n    public bool ReturnBook(string isbn)\n    {\n        Book book = books.FirstOrDefault(b => b.ISBN == isbn);\n        if (book == null)\n        {\n            Console.WriteLine($\"ISBN {isbn} の本が見つかりません。\");\n            return false;\n        }\n        \n        if (book.IsAvailable)\n        {\n            Console.WriteLine($\"'{book.Title}' は既に返却済みです。\");\n            return false;\n        }\n        \n        book.IsAvailable = true;\n        Console.WriteLine($\"'{book.Title}' が返却されました。\");\n        return true;\n    }\n    \n    public List<Book> SearchByTitle(string title)\n    {\n        return books.Where(b => b.Title.Contains(title)).ToList();\n    }\n    \n    public List<Book> SearchByAuthor(string author)\n    {\n        return books.Where(b => b.Author.Contains(author)).ToList();\n    }\n    \n    public void DisplayAllBooks()\n    {\n        Console.WriteLine(\"\\n=== 図書館の蔵書一覧 ===\");\n        if (books.Count == 0)\n        {\n            Console.WriteLine(\"蔵書がありません。\");\n            return;\n        }\n        \n        foreach (Book book in books)\n        {\n            book.DisplayInfo();\n        }\n    }\n    \n    public void DisplayAvailableBooks()\n    {\n        Console.WriteLine(\"\\n=== 利用可能な本 ===\");\n        List<Book> availableBooks = books.Where(b => b.IsAvailable).ToList();\n        \n        if (availableBooks.Count == 0)\n        {\n            Console.WriteLine(\"現在利用可能な本はありません。\");\n            return;\n        }\n        \n        foreach (Book book in availableBooks)\n        {\n            book.DisplayInfo();\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 7-6: 図書館の本管理システム\n        Library library = new Library();\n        \n        // 本を追加\n        library.AddBook(new Book(\"吾輩は猫である\", \"夏目漱石\", \"978-4-10-101001-0\"));\n        library.AddBook(new Book(\"坊っちゃん\", \"夏目漱石\", \"978-4-10-101002-7\"));\n        library.AddBook(new Book(\"羅生門\", \"芥川龍之介\", \"978-4-10-102001-9\"));\n        library.AddBook(new Book(\"銀河鉄道の夜\", \"宮沢賢治\", \"978-4-10-103001-8\"));\n        \n        // 全蔵書表示\n        library.DisplayAllBooks();\n        \n        // 本の貸出\n        Console.WriteLine(\"\\n=== 貸出テスト ===\");\n        library.BorrowBook(\"978-4-10-101001-0\");\n        library.BorrowBook(\"978-4-10-102001-9\");\n        library.BorrowBook(\"978-4-10-999999-9\"); // 存在しない本\n        \n        // 利用可能な本表示\n        library.DisplayAvailableBooks();\n        \n        // 本の返却\n        Console.WriteLine(\"\\n=== 返却テスト ===\");\n        library.ReturnBook(\"978-4-10-101001-0\");\n        \n        // 検索テスト\n        Console.WriteLine(\"\\n=== 検索テスト ===\");\n        List<Book> searchResults = library.SearchByAuthor(\"夏目漱石\");\n        Console.WriteLine($\"著者 '夏目漱石' の検索結果: {searchResults.Count}件\");\n        foreach (Book book in searchResults)\n        {\n            book.DisplayInfo();\n        }\n    }\n}"
      },
      {
        "filename": "Problem7-7.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Item\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public int Quantity { get; set; }\n    \n    public Item(string name, decimal price, int quantity)\n    {\n        Name = name;\n        Price = price;\n        Quantity = quantity;\n    }\n    \n    public decimal GetSubtotal()\n    {\n        return Price * Quantity;\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"{Name} - 単価: {Price:C} × {Quantity}個 = {GetSubtotal():C}\");\n    }\n}\n\nclass ShoppingCart\n{\n    private List<Item> items;\n    private decimal discountPercentage;\n    \n    public ShoppingCart()\n    {\n        items = new List<Item>();\n        discountPercentage = 0;\n    }\n    \n    public void AddItem(Item item)\n    {\n        // 既に同じ名前のアイテムがあるかチェック\n        Item existingItem = items.FirstOrDefault(i => i.Name == item.Name);\n        if (existingItem != null)\n        {\n            existingItem.Quantity += item.Quantity;\n            Console.WriteLine($\"'{item.Name}' の数量を {existingItem.Quantity} 個に更新しました。\");\n        }\n        else\n        {\n            items.Add(item);\n            Console.WriteLine($\"'{item.Name}' をカートに追加しました。\");\n        }\n    }\n    \n    public bool RemoveItem(string itemName)\n    {\n        Item item = items.FirstOrDefault(i => i.Name == itemName);\n        if (item != null)\n        {\n            items.Remove(item);\n            Console.WriteLine($\"'{itemName}' をカートから削除しました。\");\n            return true;\n        }\n        else\n        {\n            Console.WriteLine($\"'{itemName}' はカートにありません。\");\n            return false;\n        }\n    }\n    \n    public bool UpdateQuantity(string itemName, int newQuantity)\n    {\n        Item item = items.FirstOrDefault(i => i.Name == itemName);\n        if (item != null)\n        {\n            if (newQuantity <= 0)\n            {\n                return RemoveItem(itemName);\n            }\n            else\n            {\n                item.Quantity = newQuantity;\n                Console.WriteLine($\"'{itemName}' の数量を {newQuantity} 個に更新しました。\");\n                return true;\n            }\n        }\n        else\n        {\n            Console.WriteLine($\"'{itemName}' はカートにありません。\");\n            return false;\n        }\n    }\n    \n    public decimal CalculateSubtotal()\n    {\n        return items.Sum(item => item.GetSubtotal());\n    }\n    \n    public decimal CalculateTotal()\n    {\n        decimal subtotal = CalculateSubtotal();\n        decimal discountAmount = subtotal * (discountPercentage / 100);\n        return subtotal - discountAmount;\n    }\n    \n    public void ApplyDiscount(decimal percentage)\n    {\n        if (percentage >= 0 && percentage <= 100)\n        {\n            discountPercentage = percentage;\n            Console.WriteLine($\"{percentage}% の割引を適用しました。\");\n        }\n        else\n        {\n            Console.WriteLine(\"無効な割引率です（0-100%の範囲で入力してください）。\");\n        }\n    }\n    \n    public void DisplayCart()\n    {\n        Console.WriteLine(\"\\n=== ショッピングカート ===\");\n        if (items.Count == 0)\n        {\n            Console.WriteLine(\"カートは空です。\");\n            return;\n        }\n        \n        foreach (Item item in items)\n        {\n            item.DisplayInfo();\n        }\n        \n        decimal subtotal = CalculateSubtotal();\n        Console.WriteLine($\"\\n小計: {subtotal:C}\");\n        \n        if (discountPercentage > 0)\n        {\n            decimal discountAmount = subtotal * (discountPercentage / 100);\n            Console.WriteLine($\"割引 ({discountPercentage}%): -{discountAmount:C}\");\n        }\n        \n        Console.WriteLine($\"合計: {CalculateTotal():C}\");\n        Console.WriteLine(\"========================\");\n    }\n    \n    public int GetItemCount()\n    {\n        return items.Count;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 7-7: ショッピングカートシステム\n        ShoppingCart cart = new ShoppingCart();\n        \n        Console.WriteLine(\"ショッピングカートシステムのテスト\");\n        \n        // アイテムを追加\n        cart.AddItem(new Item(\"ノートPC\", 80000, 1));\n        cart.AddItem(new Item(\"マウス\", 2500, 2));\n        cart.AddItem(new Item(\"キーボード\", 5000, 1));\n        cart.AddItem(new Item(\"マウス\", 2500, 1)); // 既存アイテムの数量追加\n        \n        // カート内容表示\n        cart.DisplayCart();\n        \n        // 数量更新\n        Console.WriteLine(\"\\n=== 数量更新 ===\");\n        cart.UpdateQuantity(\"マウス\", 2);\n        cart.UpdateQuantity(\"キーボード\", 2);\n        \n        // 10%割引を適用\n        Console.WriteLine(\"\\n=== 割引適用 ===\");\n        cart.ApplyDiscount(10);\n        cart.DisplayCart();\n        \n        // アイテム削除\n        Console.WriteLine(\"\\n=== アイテム削除 ===\");\n        cart.RemoveItem(\"キーボード\");\n        \n        // 20%割引に変更\n        Console.WriteLine(\"\\n=== 割引変更 ===\");\n        cart.ApplyDiscount(20);\n        cart.DisplayCart();\n        \n        // 新しいアイテム追加\n        Console.WriteLine(\"\\n=== 追加購入 ===\");\n        cart.AddItem(new Item(\"モニター\", 25000, 1));\n        cart.DisplayCart();\n    }\n}"
      },
      {
        "filename": "Problem7-8.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nabstract class Animal\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    \n    public Animal(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n    \n    public virtual void DisplayInfo()\n    {\n        Console.WriteLine($\"名前: {Name}, 年齢: {Age}歳\");\n    }\n    \n    public abstract string MakeSound();\n    \n    public virtual string GetAnimalType()\n    {\n        return this.GetType().Name;\n    }\n}\n\nclass Dog : Animal\n{\n    public string Breed { get; set; }\n    \n    public Dog(string name, int age, string breed) : base(name, age)\n    {\n        Breed = breed;\n    }\n    \n    public override string MakeSound()\n    {\n        return \"ワンワン！\";\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo();\n        Console.WriteLine($\"種類: 犬（{Breed}）\");\n    }\n}\n\nclass Cat : Animal\n{\n    public string Color { get; set; }\n    \n    public Cat(string name, int age, string color) : base(name, age)\n    {\n        Color = color;\n    }\n    \n    public override string MakeSound()\n    {\n        return \"ニャーニャー！\";\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo();\n        Console.WriteLine($\"種類: 猫（{Color}）\");\n    }\n}\n\nclass Bird : Animal\n{\n    public string Species { get; set; }\n    public bool CanFly { get; set; }\n    \n    public Bird(string name, int age, string species, bool canFly) : base(name, age)\n    {\n        Species = species;\n        CanFly = canFly;\n    }\n    \n    public override string MakeSound()\n    {\n        return \"チュンチュン！\";\n    }\n    \n    public override void DisplayInfo()\n    {\n        base.DisplayInfo();\n        string flyStatus = CanFly ? \"飛べる\" : \"飛べない\";\n        Console.WriteLine($\"種類: 鳥（{Species}・{flyStatus}）\");\n    }\n}\n\nclass AnimalShelter\n{\n    private List<Animal> animals;\n    \n    public AnimalShelter()\n    {\n        animals = new List<Animal>();\n    }\n    \n    public void AddAnimal(Animal animal)\n    {\n        animals.Add(animal);\n        Console.WriteLine($\"{animal.GetAnimalType()} の '{animal.Name}' をシェルターに追加しました。\");\n    }\n    \n    public List<Animal> GetAllAnimals()\n    {\n        return new List<Animal>(animals);\n    }\n    \n    public List<Animal> GetAnimalsByType<T>() where T : Animal\n    {\n        return animals.OfType<T>().Cast<Animal>().ToList();\n    }\n    \n    public List<Animal> GetAnimalsByType(Type animalType)\n    {\n        return animals.Where(a => a.GetType() == animalType).ToList();\n    }\n    \n    public void DisplayAllAnimals()\n    {\n        Console.WriteLine(\"\\n=== シェルターの全動物 ===\");\n        if (animals.Count == 0)\n        {\n            Console.WriteLine(\"シェルターに動物はいません。\");\n            return;\n        }\n        \n        for (int i = 0; i < animals.Count; i++)\n        {\n            Console.WriteLine($\"\\n動物 #{i + 1}:\");\n            animals[i].DisplayInfo();\n            Console.WriteLine($\"鳴き声: {animals[i].MakeSound()}\");\n            Console.WriteLine(\"-------------------\");\n        }\n    }\n    \n    public void DisplayAnimalsByType(Type animalType)\n    {\n        List<Animal> filteredAnimals = GetAnimalsByType(animalType);\n        Console.WriteLine($\"\\n=== {animalType.Name} 一覧 ===\");\n        \n        if (filteredAnimals.Count == 0)\n        {\n            Console.WriteLine($\"{animalType.Name} はいません。\");\n            return;\n        }\n        \n        foreach (Animal animal in filteredAnimals)\n        {\n            animal.DisplayInfo();\n            Console.WriteLine($\"鳴き声: {animal.MakeSound()}\");\n            Console.WriteLine(\"-------------------\");\n        }\n    }\n    \n    public void PlaySounds()\n    {\n        Console.WriteLine(\"\\n=== 動物たちの大合唱 ===\");\n        foreach (Animal animal in animals)\n        {\n            Console.WriteLine($\"{animal.Name}: {animal.MakeSound()}\");\n        }\n    }\n    \n    public int GetAnimalCount()\n    {\n        return animals.Count;\n    }\n    \n    public void GetShelterStatistics()\n    {\n        Console.WriteLine(\"\\n=== シェルター統計 ===\");\n        Console.WriteLine($\"総動物数: {animals.Count}匹\");\n        \n        int dogCount = GetAnimalsByType(typeof(Dog)).Count;\n        int catCount = GetAnimalsByType(typeof(Cat)).Count;\n        int birdCount = GetAnimalsByType(typeof(Bird)).Count;\n        \n        Console.WriteLine($\"犬: {dogCount}匹\");\n        Console.WriteLine($\"猫: {catCount}匹\");\n        Console.WriteLine($\"鳥: {birdCount}羽\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 7-8: 動物の分類システム\n        AnimalShelter shelter = new AnimalShelter();\n        \n        Console.WriteLine(\"動物シェルター管理システム\");\n        \n        // 動物をシェルターに追加\n        shelter.AddAnimal(new Dog(\"ポチ\", 3, \"柴犬\"));\n        shelter.AddAnimal(new Dog(\"ハチ\", 5, \"秋田犬\"));\n        shelter.AddAnimal(new Cat(\"タマ\", 2, \"三毛猫\"));\n        shelter.AddAnimal(new Cat(\"クロ\", 4, \"黒猫\"));\n        shelter.AddAnimal(new Bird(\"ピーちゃん\", 1, \"セキセイインコ\", true));\n        shelter.AddAnimal(new Bird(\"ペンペン\", 6, \"ペンギン\", false));\n        \n        // 全動物表示\n        shelter.DisplayAllAnimals();\n        \n        // 種類別表示\n        shelter.DisplayAnimalsByType(typeof(Dog));\n        shelter.DisplayAnimalsByType(typeof(Cat));\n        \n        // 動物たちの鳴き声\n        shelter.PlaySounds();\n        \n        // 統計情報\n        shelter.GetShelterStatistics();\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise08",
    "directory": "Exercise08",
    "title": "Exercise 08: 継承とポリモーフィズム (難易度: 4)",
    "difficulty": 4,
    "description": "C#の継承とポリモーフィズムについて学習します。",
    "readme": "# Exercise 08: 継承とポリモーフィズム (難易度: 4)\n\n## 概要\nC#の継承とポリモーフィズムについて学習します。\n\n## 問題\n\n### 問題 8-1 (難易度: 4)\n動物の継承階層を作成してください。\n\n**要求事項:**\n- 基底クラス Animal を作成する\n- プロパティ: Name (string), Age (int)\n- 仮想メソッド: MakeSound(), Move()\n- 派生クラス: Dog, Cat を作成する\n- 各派生クラスで MakeSound(), Move() をオーバーライドする\n- メインメソッドでポリモーフィズムをデモンストレーションする\n\n### 問題 8-2 (難易度: 4)\n従業員管理システムを作成してください。\n\n**要求事項:**\n- 基底クラス Employee を作成する\n- プロパティ: Name, Id, BaseSalary\n- 抽象メソッド: CalculateSalary()\n- 派生クラス: FullTimeEmployee, PartTimeEmployee を作成する\n- FullTimeEmployee: 基本給に賞与を加算\n- PartTimeEmployee: 時給 × 勤務時間\n- メインメソッドで各従業員の給与を計算する",
    "solutions": [
      {
        "filename": "Problem8-1.cs",
        "content": "using System;\n\nclass Animal\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    \n    public Animal(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n    \n    public virtual void MakeSound()\n    {\n        Console.WriteLine($\"{Name}が音を出しています\");\n    }\n    \n    public virtual void Move()\n    {\n        Console.WriteLine($\"{Name}が移動しています\");\n    }\n    \n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"名前: {Name}, 年齢: {Age}歳\");\n    }\n}\n\nclass Dog : Animal\n{\n    public Dog(string name, int age) : base(name, age)\n    {\n    }\n    \n    public override void MakeSound()\n    {\n        Console.WriteLine($\"{Name}が「ワンワン」と鳴いています\");\n    }\n    \n    public override void Move()\n    {\n        Console.WriteLine($\"{Name}が走っています\");\n    }\n}\n\nclass Cat : Animal\n{\n    public Cat(string name, int age) : base(name, age)\n    {\n    }\n    \n    public override void MakeSound()\n    {\n        Console.WriteLine($\"{Name}が「ニャーニャー」と鳴いています\");\n    }\n    \n    public override void Move()\n    {\n        Console.WriteLine($\"{Name}がしなやかに歩いています\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 8-1: 動物の継承階層\n        Animal[] animals = {\n            new Dog(\"ポチ\", 3),\n            new Cat(\"ミケ\", 2),\n            new Dog(\"ハチ\", 5)\n        };\n        \n        Console.WriteLine(\"動物たちの行動:\");\n        foreach (Animal animal in animals)\n        {\n            animal.DisplayInfo();\n            animal.MakeSound();\n            animal.Move();\n            Console.WriteLine(\"-------------------\");\n        }\n    }\n}"
      },
      {
        "filename": "Problem8-2.cs",
        "content": "using System;\n\nabstract class Employee\n{\n    public string Name { get; set; }\n    public int Id { get; set; }\n    public decimal BaseSalary { get; set; }\n    \n    public Employee(string name, int id, decimal baseSalary)\n    {\n        Name = name;\n        Id = id;\n        BaseSalary = baseSalary;\n    }\n    \n    public abstract decimal CalculateSalary();\n    \n    public virtual void DisplayInfo()\n    {\n        Console.WriteLine($\"ID: {Id}, 名前: {Name}\");\n        Console.WriteLine($\"給与: {CalculateSalary():C}\");\n    }\n}\n\nclass FullTimeEmployee : Employee\n{\n    public decimal Bonus { get; set; }\n    \n    public FullTimeEmployee(string name, int id, decimal baseSalary, decimal bonus) \n        : base(name, id, baseSalary)\n    {\n        Bonus = bonus;\n    }\n    \n    public override decimal CalculateSalary()\n    {\n        return BaseSalary + Bonus;\n    }\n    \n    public override void DisplayInfo()\n    {\n        Console.WriteLine($\"正社員 - ID: {Id}, 名前: {Name}\");\n        Console.WriteLine($\"基本給: {BaseSalary:C}, 賞与: {Bonus:C}\");\n        Console.WriteLine($\"総給与: {CalculateSalary():C}\");\n    }\n}\n\nclass PartTimeEmployee : Employee\n{\n    public decimal HourlyRate { get; set; }\n    public int WorkedHours { get; set; }\n    \n    public PartTimeEmployee(string name, int id, decimal hourlyRate, int workedHours) \n        : base(name, id, 0)\n    {\n        HourlyRate = hourlyRate;\n        WorkedHours = workedHours;\n    }\n    \n    public override decimal CalculateSalary()\n    {\n        return HourlyRate * WorkedHours;\n    }\n    \n    public override void DisplayInfo()\n    {\n        Console.WriteLine($\"パートタイム - ID: {Id}, 名前: {Name}\");\n        Console.WriteLine($\"時給: {HourlyRate:C}, 勤務時間: {WorkedHours}時間\");\n        Console.WriteLine($\"総給与: {CalculateSalary():C}\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 8-2: 従業員管理システム\n        Employee[] employees = {\n            new FullTimeEmployee(\"田中太郎\", 1001, 300000, 50000),\n            new PartTimeEmployee(\"佐藤花子\", 2001, 1200, 80),\n            new FullTimeEmployee(\"鈴木次郎\", 1002, 350000, 60000),\n            new PartTimeEmployee(\"山田三郎\", 2002, 1000, 120)\n        };\n        \n        Console.WriteLine(\"従業員給与一覧:\");\n        Console.WriteLine(\"================\");\n        \n        foreach (Employee employee in employees)\n        {\n            employee.DisplayInfo();\n            Console.WriteLine(\"-------------------\");\n        }\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise09",
    "directory": "Exercise09",
    "title": "Exercise 09: インターフェースと抽象クラス (難易度: 4)",
    "difficulty": 4,
    "description": "C#のインターフェースと抽象クラスの使い方について学習します。",
    "readme": "# Exercise 09: インターフェースと抽象クラス (難易度: 4)\n\n## 概要\nC#のインターフェースと抽象クラスの使い方について学習します。\n\n## 問題\n\n### 問題 9-1 (難易度: 4)\n図形描画システムを作成してください。\n\n**要求事項:**\n- IDrawable インターフェースを作成する（Draw() メソッド）\n- IResizable インターフェースを作成する（Resize(double factor) メソッド）\n- Shape 抽象クラスを作成する（Area() 抽象メソッド、Name プロパティ）\n- Rectangle, Circle クラスを作成し、両方のインターフェースを実装する\n- メインメソッドで各図形を描画し、リサイズする\n\n### 問題 9-2 (難易度: 4)\nファイル処理システムを作成してください。\n\n**要求事項:**\n- IFileProcessor インターフェースを作成する\n- メソッド: Process(string content), GetProcessorName()\n- 実装クラス: TextProcessor, CsvProcessor, JsonProcessor を作成する\n- 各プロセッサーで異なる処理を実装する\n- メインメソッドでファイルプロセッサーの配列を使用して処理を実行する",
    "solutions": [
      {
        "filename": "Problem9-1.cs",
        "content": "using System;\n\ninterface IDrawable\n{\n    void Draw();\n}\n\ninterface IResizable\n{\n    void Resize(double factor);\n}\n\nabstract class Shape\n{\n    public string Name { get; protected set; }\n    \n    public abstract double Area();\n}\n\nclass Rectangle : Shape, IDrawable, IResizable\n{\n    public double Width { get; private set; }\n    public double Height { get; private set; }\n    \n    public Rectangle(double width, double height)\n    {\n        Width = width;\n        Height = height;\n        Name = \"長方形\";\n    }\n    \n    public override double Area()\n    {\n        return Width * Height;\n    }\n    \n    public void Draw()\n    {\n        Console.WriteLine($\"{Name}を描画しています (幅: {Width}, 高さ: {Height})\");\n        Console.WriteLine(\"┌─────────┐\");\n        Console.WriteLine(\"│         │\");\n        Console.WriteLine(\"│         │\");\n        Console.WriteLine(\"└─────────┘\");\n    }\n    \n    public void Resize(double factor)\n    {\n        Width *= factor;\n        Height *= factor;\n        Console.WriteLine($\"{Name}を{factor}倍にリサイズしました\");\n    }\n}\n\nclass Circle : Shape, IDrawable, IResizable\n{\n    public double Radius { get; private set; }\n    \n    public Circle(double radius)\n    {\n        Radius = radius;\n        Name = \"円\";\n    }\n    \n    public override double Area()\n    {\n        return Math.PI * Radius * Radius;\n    }\n    \n    public void Draw()\n    {\n        Console.WriteLine($\"{Name}を描画しています (半径: {Radius})\");\n        Console.WriteLine(\"   ●●●   \");\n        Console.WriteLine(\" ●     ● \");\n        Console.WriteLine(\"●       ●\");\n        Console.WriteLine(\" ●     ● \");\n        Console.WriteLine(\"   ●●●   \");\n    }\n    \n    public void Resize(double factor)\n    {\n        Radius *= factor;\n        Console.WriteLine($\"{Name}を{factor}倍にリサイズしました\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 9-1: 図形描画システム\n        IDrawable[] drawables = {\n            new Rectangle(5.0, 3.0),\n            new Circle(2.5)\n        };\n        \n        Console.WriteLine(\"図形描画システム\");\n        Console.WriteLine(\"================\");\n        \n        foreach (IDrawable drawable in drawables)\n        {\n            Shape shape = (Shape)drawable;\n            Console.WriteLine($\"\\n{shape.Name} - 面積: {shape.Area():F2}\");\n            drawable.Draw();\n            \n            if (drawable is IResizable resizable)\n            {\n                resizable.Resize(1.5);\n                Console.WriteLine($\"リサイズ後の面積: {shape.Area():F2}\");\n            }\n            \n            Console.WriteLine(\"-------------------\");\n        }\n    }\n}"
      },
      {
        "filename": "Problem9-2.cs",
        "content": "using System;\n\ninterface IFileProcessor\n{\n    void Process(string content);\n    string GetProcessorName();\n}\n\nclass TextProcessor : IFileProcessor\n{\n    public void Process(string content)\n    {\n        Console.WriteLine($\"テキスト処理を実行中...\");\n        Console.WriteLine($\"内容: {content}\");\n        Console.WriteLine($\"文字数: {content.Length}文字\");\n        Console.WriteLine($\"行数: {content.Split('\\n').Length}行\");\n    }\n    \n    public string GetProcessorName()\n    {\n        return \"テキストプロセッサー\";\n    }\n}\n\nclass CsvProcessor : IFileProcessor\n{\n    public void Process(string content)\n    {\n        Console.WriteLine($\"CSV処理を実行中...\");\n        string[] lines = content.Split('\\n');\n        Console.WriteLine($\"レコード数: {lines.Length}行\");\n        \n        if (lines.Length > 0)\n        {\n            string[] columns = lines[0].Split(',');\n            Console.WriteLine($\"列数: {columns.Length}列\");\n            Console.WriteLine(\"カラム名:\");\n            foreach (string column in columns)\n            {\n                Console.WriteLine($\"  - {column.Trim()}\");\n            }\n        }\n    }\n    \n    public string GetProcessorName()\n    {\n        return \"CSVプロセッサー\";\n    }\n}\n\nclass JsonProcessor : IFileProcessor\n{\n    public void Process(string content)\n    {\n        Console.WriteLine($\"JSON処理を実行中...\");\n        Console.WriteLine($\"JSON内容: {content}\");\n        \n        // 簡単なJSON解析デモ\n        int openBraces = 0, closeBraces = 0;\n        foreach (char c in content)\n        {\n            if (c == '{') openBraces++;\n            if (c == '}') closeBraces++;\n        }\n        \n        Console.WriteLine($\"開始ブレース: {openBraces}個\");\n        Console.WriteLine($\"終了ブレース: {closeBraces}個\");\n        Console.WriteLine($\"JSONの妥当性: {(openBraces == closeBraces ? \"有効\" : \"無効\")}\");\n    }\n    \n    public string GetProcessorName()\n    {\n        return \"JSONプロセッサー\";\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 9-2: ファイル処理システム\n        IFileProcessor[] processors = {\n            new TextProcessor(),\n            new CsvProcessor(),\n            new JsonProcessor()\n        };\n        \n        string[] testContents = {\n            \"これはテストテキストです。\\n複数行のサンプルです。\",\n            \"名前,年齢,職業\\n田中太郎,25,エンジニア\\n佐藤花子,30,デザイナー\",\n            \"{\\\"name\\\": \\\"田中太郎\\\", \\\"age\\\": 25, \\\"job\\\": \\\"エンジニア\\\"}\"\n        };\n        \n        Console.WriteLine(\"ファイル処理システム\");\n        Console.WriteLine(\"===================\");\n        \n        for (int i = 0; i < processors.Length; i++)\n        {\n            Console.WriteLine($\"\\n{processors[i].GetProcessorName()}で処理中:\");\n            Console.WriteLine(\"----------------------------------------\");\n            processors[i].Process(testContents[i]);\n            Console.WriteLine();\n        }\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise10",
    "directory": "Exercise10",
    "title": "Exercise 10: 例外処理 (難易度: 3-4)",
    "difficulty": 3,
    "description": "C#の例外処理（try-catch-finally）について学習します。",
    "readme": "# Exercise 10: 例外処理 (難易度: 3-4)\n\n## 概要\nC#の例外処理（try-catch-finally）について学習します。\n\n## 問題\n\n### 問題 10-1 (難易度: 3)\n安全な数値入力システムを作成してください。\n\n**要求事項:**\n- ユーザーから数値を入力として受け取る\n- 無効な入力に対して適切なエラーハンドリングを行う\n- FormatException, OverflowException を個別に処理する\n- ユーザーが有効な数値を入力するまで繰り返す\n- finally ブロックを使用してリソースのクリーンアップをデモンストレーションする\n\n### 問題 10-2 (難易度: 4)\nファイル読み込み処理の例外処理を実装してください。\n\n**要求事項:**\n- 指定されたファイルを読み込む機能\n- FileNotFoundException, UnauthorizedAccessException, IOException を処理\n- カスタム例外クラス FileProcessingException を作成する\n- 複数のファイルを処理し、エラーが発生しても他のファイル処理を継続する\n- 処理結果のサマリーを表示する\n\n### 問題 10-3 (難易度: 4)\n電卓アプリケーションに包括的な例外処理を追加してください。\n\n**要求事項:**\n- 四則演算を行う電卓クラス\n- DivideByZeroException, ArgumentException を処理\n- カスタム例外 InvalidOperationException を作成\n- 複数の計算を実行し、エラー発生時の適切な処理を実装\n- ログ機能を追加して例外情報を記録する",
    "solutions": [
      {
        "filename": "Problem10-1.cs",
        "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 10-1: 安全な数値入力システム\n        Console.WriteLine(\"安全な数値入力システム\");\n        Console.WriteLine(\"===================\");\n        \n        int number = GetSafeIntegerInput(\"整数を入力してください: \");\n        double decimalNumber = GetSafeDoubleInput(\"小数を入力してください: \");\n        \n        Console.WriteLine($\"入力された整数: {number}\");\n        Console.WriteLine($\"入力された小数: {decimalNumber}\");\n    }\n    \n    static int GetSafeIntegerInput(string prompt)\n    {\n        while (true)\n        {\n            Console.Write(prompt);\n            string input = null;\n            \n            try\n            {\n                input = Console.ReadLine();\n                int result = int.Parse(input);\n                return result;\n            }\n            catch (FormatException)\n            {\n                Console.WriteLine($\"エラー: '{input}' は有効な整数ではありません。数値を入力してください。\");\n            }\n            catch (OverflowException)\n            {\n                Console.WriteLine($\"エラー: '{input}' は整数の範囲を超えています。\");\n            }\n            catch (ArgumentNullException)\n            {\n                Console.WriteLine(\"エラー: 入力が空です。数値を入力してください。\");\n            }\n            finally\n            {\n                // リソースクリーンアップのデモンストレーション\n                if (input != null && input.Length > 10)\n                {\n                    Console.WriteLine(\"長い入力文字列のメモリをクリーンアップしました。\");\n                }\n            }\n        }\n    }\n    \n    static double GetSafeDoubleInput(string prompt)\n    {\n        while (true)\n        {\n            Console.Write(prompt);\n            string input = null;\n            \n            try\n            {\n                input = Console.ReadLine();\n                double result = double.Parse(input);\n                \n                if (double.IsInfinity(result))\n                {\n                    throw new OverflowException(\"数値が無限大です\");\n                }\n                \n                if (double.IsNaN(result))\n                {\n                    throw new FormatException(\"数値が無効です\");\n                }\n                \n                return result;\n            }\n            catch (FormatException)\n            {\n                Console.WriteLine($\"エラー: '{input}' は有効な数値ではありません。\");\n            }\n            catch (OverflowException ex)\n            {\n                Console.WriteLine($\"エラー: {ex.Message}\");\n            }\n            finally\n            {\n                Console.WriteLine(\"入力処理を完了しました。\");\n            }\n        }\n    }\n}"
      },
      {
        "filename": "Problem10-2.cs",
        "content": "using System;\nusing System.IO;\nusing System.Collections.Generic;\n\npublic class FileProcessingException : Exception\n{\n    public FileProcessingException(string message) : base(message) { }\n    public FileProcessingException(string message, Exception innerException) : base(message, innerException) { }\n}\n\nclass FileProcessor\n{\n    private List<string> processedFiles = new List<string>();\n    private List<string> failedFiles = new List<string>();\n    \n    public void ProcessFiles(string[] filePaths)\n    {\n        Console.WriteLine(\"ファイル処理を開始します...\\n\");\n        \n        foreach (string filePath in filePaths)\n        {\n            ProcessSingleFile(filePath);\n        }\n        \n        DisplaySummary();\n    }\n    \n    private void ProcessSingleFile(string filePath)\n    {\n        try\n        {\n            Console.WriteLine($\"ファイル処理中: {filePath}\");\n            \n            // ファイル存在チェック\n            if (!File.Exists(filePath))\n            {\n                throw new FileNotFoundException($\"ファイルが見つかりません: {filePath}\");\n            }\n            \n            // ファイル読み込み\n            string content = File.ReadAllText(filePath);\n            \n            // ファイル内容の検証\n            if (string.IsNullOrWhiteSpace(content))\n            {\n                throw new FileProcessingException($\"ファイルが空です: {filePath}\");\n            }\n            \n            // 処理のシミュレーション\n            ProcessFileContent(content, filePath);\n            \n            processedFiles.Add(filePath);\n            Console.WriteLine($\"✓ 処理完了: {filePath}\\n\");\n        }\n        catch (FileNotFoundException ex)\n        {\n            Console.WriteLine($\"✗ ファイル未発見エラー: {ex.Message}\");\n            failedFiles.Add(filePath);\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            Console.WriteLine($\"✗ アクセス権限エラー: {ex.Message}\");\n            failedFiles.Add(filePath);\n        }\n        catch (IOException ex)\n        {\n            Console.WriteLine($\"✗ I/Oエラー: {ex.Message}\");\n            failedFiles.Add(filePath);\n        }\n        catch (FileProcessingException ex)\n        {\n            Console.WriteLine($\"✗ 処理エラー: {ex.Message}\");\n            failedFiles.Add(filePath);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"✗ 予期しないエラー: {ex.Message}\");\n            failedFiles.Add(filePath);\n        }\n        finally\n        {\n            // リソースクリーンアップ\n            GC.Collect();\n        }\n    }\n    \n    private void ProcessFileContent(string content, string filePath)\n    {\n        // ファイル処理のシミュレーション\n        Console.WriteLine($\"  内容サイズ: {content.Length} bytes\");\n        Console.WriteLine($\"  行数: {content.Split('\\n').Length}\");\n        \n        // 処理時間のシミュレーション\n        System.Threading.Thread.Sleep(100);\n    }\n    \n    private void DisplaySummary()\n    {\n        Console.WriteLine(\"=== 処理結果サマリー ===\");\n        Console.WriteLine($\"処理成功: {processedFiles.Count}件\");\n        Console.WriteLine($\"処理失敗: {failedFiles.Count}件\");\n        \n        if (processedFiles.Count > 0)\n        {\n            Console.WriteLine(\"\\n成功したファイル:\");\n            foreach (string file in processedFiles)\n            {\n                Console.WriteLine($\"  ✓ {file}\");\n            }\n        }\n        \n        if (failedFiles.Count > 0)\n        {\n            Console.WriteLine(\"\\n失敗したファイル:\");\n            foreach (string file in failedFiles)\n            {\n                Console.WriteLine($\"  ✗ {file}\");\n            }\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 10-2: ファイル読み込み処理の例外処理\n        Console.WriteLine(\"ファイル処理システム\");\n        Console.WriteLine(\"==================\");\n        \n        // テスト用のファイルパス（実際には存在しないファイルも含む）\n        string[] testFiles = {\n            \"existing_file.txt\",\n            \"non_existent_file.txt\", \n            \"/system/protected_file.txt\",\n            \"empty_file.txt\"\n        };\n        \n        // テスト用ファイルを作成\n        CreateTestFiles();\n        \n        FileProcessor processor = new FileProcessor();\n        processor.ProcessFiles(testFiles);\n        \n        // テストファイルをクリーンアップ\n        CleanupTestFiles();\n    }\n    \n    static void CreateTestFiles()\n    {\n        try\n        {\n            File.WriteAllText(\"existing_file.txt\", \"これはテスト用のファイル内容です。\\n複数行のテストデータです。\");\n            File.WriteAllText(\"empty_file.txt\", \"\");\n            Console.WriteLine(\"テスト用ファイルを作成しました。\\n\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"テストファイルの作成に失敗しました: {ex.Message}\");\n        }\n    }\n    \n    static void CleanupTestFiles()\n    {\n        try\n        {\n            if (File.Exists(\"existing_file.txt\")) File.Delete(\"existing_file.txt\");\n            if (File.Exists(\"empty_file.txt\")) File.Delete(\"empty_file.txt\");\n            Console.WriteLine(\"\\nテスト用ファイルをクリーンアップしました。\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"クリーンアップエラー: {ex.Message}\");\n        }\n    }\n}"
      },
      {
        "filename": "Problem10-3.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic class InvalidCalculatorOperationException : Exception\n{\n    public InvalidCalculatorOperationException(string message) : base(message) { }\n    public InvalidCalculatorOperationException(string message, Exception innerException) : base(message, innerException) { }\n}\n\nclass Calculator\n{\n    private List<string> operationLog = new List<string>();\n    private List<string> errorLog = new List<string>();\n    \n    public double Add(double a, double b)\n    {\n        try\n        {\n            if (double.IsInfinity(a) || double.IsInfinity(b))\n            {\n                throw new ArgumentException(\"無限大の値は計算できません\");\n            }\n            \n            double result = a + b;\n            LogOperation($\"{a} + {b} = {result}\");\n            return result;\n        }\n        catch (Exception ex)\n        {\n            LogError($\"加算エラー: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    public double Subtract(double a, double b)\n    {\n        try\n        {\n            if (double.IsInfinity(a) || double.IsInfinity(b))\n            {\n                throw new ArgumentException(\"無限大の値は計算できません\");\n            }\n            \n            double result = a - b;\n            LogOperation($\"{a} - {b} = {result}\");\n            return result;\n        }\n        catch (Exception ex)\n        {\n            LogError($\"減算エラー: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    public double Multiply(double a, double b)\n    {\n        try\n        {\n            if (double.IsInfinity(a) || double.IsInfinity(b))\n            {\n                throw new ArgumentException(\"無限大の値は計算できません\");\n            }\n            \n            double result = a * b;\n            \n            if (double.IsInfinity(result))\n            {\n                throw new InvalidCalculatorOperationException(\"計算結果が無限大になりました\");\n            }\n            \n            LogOperation($\"{a} * {b} = {result}\");\n            return result;\n        }\n        catch (Exception ex)\n        {\n            LogError($\"乗算エラー: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    public double Divide(double a, double b)\n    {\n        try\n        {\n            if (b == 0)\n            {\n                throw new DivideByZeroException(\"0で割ることはできません\");\n            }\n            \n            if (double.IsInfinity(a) || double.IsInfinity(b))\n            {\n                throw new ArgumentException(\"無限大の値は計算できません\");\n            }\n            \n            double result = a / b;\n            \n            if (double.IsInfinity(result))\n            {\n                throw new InvalidCalculatorOperationException(\"計算結果が無限大になりました\");\n            }\n            \n            LogOperation($\"{a} / {b} = {result}\");\n            return result;\n        }\n        catch (Exception ex)\n        {\n            LogError($\"除算エラー: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    private void LogOperation(string operation)\n    {\n        string logEntry = $\"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] 操作: {operation}\";\n        operationLog.Add(logEntry);\n        Console.WriteLine($\"✓ {operation}\");\n    }\n    \n    private void LogError(string error)\n    {\n        string logEntry = $\"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] エラー: {error}\";\n        errorLog.Add(logEntry);\n        Console.WriteLine($\"✗ {error}\");\n    }\n    \n    public void DisplayLogs()\n    {\n        Console.WriteLine(\"\\n=== 操作ログ ===\");\n        foreach (string log in operationLog)\n        {\n            Console.WriteLine(log);\n        }\n        \n        if (errorLog.Count > 0)\n        {\n            Console.WriteLine(\"\\n=== エラーログ ===\");\n            foreach (string log in errorLog)\n            {\n                Console.WriteLine(log);\n            }\n        }\n    }\n    \n    public void SaveLogsToFile(string fileName)\n    {\n        try\n        {\n            using (StreamWriter writer = new StreamWriter(fileName))\n            {\n                writer.WriteLine(\"=== Calculator Logs ===\");\n                writer.WriteLine($\"Generated: {DateTime.Now}\");\n                writer.WriteLine();\n                \n                writer.WriteLine(\"=== Operations ===\");\n                foreach (string log in operationLog)\n                {\n                    writer.WriteLine(log);\n                }\n                \n                if (errorLog.Count > 0)\n                {\n                    writer.WriteLine();\n                    writer.WriteLine(\"=== Errors ===\");\n                    foreach (string log in errorLog)\n                    {\n                        writer.WriteLine(log);\n                    }\n                }\n            }\n            Console.WriteLine($\"ログをファイルに保存しました: {fileName}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"ログ保存エラー: {ex.Message}\");\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 10-3: 電卓アプリケーションの包括的例外処理\n        Console.WriteLine(\"高機能電卓（例外処理付き）\");\n        Console.WriteLine(\"=========================\");\n        \n        Calculator calc = new Calculator();\n        \n        // テスト計算の実行\n        PerformCalculations(calc);\n        \n        // ログの表示\n        calc.DisplayLogs();\n        \n        // ログをファイルに保存\n        calc.SaveLogsToFile(\"calculator_log.txt\");\n    }\n    \n    static void PerformCalculations(Calculator calc)\n    {\n        // 正常な計算\n        try\n        {\n            calc.Add(10, 5);\n            calc.Subtract(20, 8);\n            calc.Multiply(6, 7);\n            calc.Divide(15, 3);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"計算エラー: {ex.Message}\");\n        }\n        \n        // エラーが発生する計算\n        try\n        {\n            Console.WriteLine(\"\\n--- エラーケースのテスト ---\");\n            calc.Divide(10, 0); // DivideByZeroException\n        }\n        catch (DivideByZeroException ex)\n        {\n            Console.WriteLine($\"ゼロ除算エラー: {ex.Message}\");\n        }\n        \n        try\n        {\n            calc.Add(double.PositiveInfinity, 10); // ArgumentException\n        }\n        catch (ArgumentException ex)\n        {\n            Console.WriteLine($\"引数エラー: {ex.Message}\");\n        }\n        \n        try\n        {\n            calc.Multiply(double.MaxValue, 2); // InvalidCalculatorOperationException\n        }\n        catch (InvalidCalculatorOperationException ex)\n        {\n            Console.WriteLine($\"計算操作エラー: {ex.Message}\");\n        }\n        \n        // 処理を継続\n        try\n        {\n            Console.WriteLine(\"\\n--- 処理継続 ---\");\n            calc.Add(100, 200);\n            calc.Subtract(500, 300);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"予期しないエラー: {ex.Message}\");\n        }\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise11",
    "directory": "Exercise11",
    "title": "Exercise 11: LINQ とコレクション操作 (難易度: 4-5)",
    "difficulty": 4,
    "description": "C#のLINQ（Language Integrated Query）とコレクション操作について学習します。",
    "readme": "# Exercise 11: LINQ とコレクション操作 (難易度: 4-5)\n\n## 概要\nC#のLINQ（Language Integrated Query）とコレクション操作について学習します。\n\n## 問題\n\n### 問題 11-1 (難易度: 4)\n学生データを管理し、様々な条件でクエリを実行してください。\n\n**要求事項:**\n- Student クラス（Name, Age, Grade, Subject プロパティ）\n- 学生データのリストを作成する\n- 以下のクエリを実装する：\n  - 成績が80点以上の学生\n  - 年齢でグループ化した学生\n  - 科目別の平均成績\n  - 名前に特定の文字が含まれる学生\n\n### 問題 11-2 (難易度: 5)\n注文管理システムを作成し、複雑なLINQクエリを実行してください。\n\n**要求事項:**\n- Order クラス（OrderId, CustomerId, OrderDate, TotalAmount プロパティ）\n- Customer クラス（CustomerId, Name, City プロパティ）\n- OrderItem クラス（OrderId, ProductName, Quantity, Price プロパティ）\n- 以下のクエリを実装する：\n  - 顧客別の注文総額\n  - 月別の売上集計\n  - 最も売れている商品トップ5\n  - 特定の都市の顧客の注文履歴\n\n### 問題 11-3 (難易度: 5)\nテキスト分析ツールをLINQを使用して作成してください。\n\n**要求事項:**\n- 長いテキストを分析する\n- 単語の出現頻度を計算する\n- 最も長い単語と短い単語を見つける\n- 特定の長さの単語をフィルタリングする\n- 文字数でグループ化した単語の統計",
    "solutions": [
      {
        "filename": "Problem11-1.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Student\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public double Grade { get; set; }\n    public string Subject { get; set; }\n    \n    public Student(string name, int age, double grade, string subject)\n    {\n        Name = name;\n        Age = age;\n        Grade = grade;\n        Subject = subject;\n    }\n    \n    public override string ToString()\n    {\n        return $\"{Name} ({Age}歳) - {Subject}: {Grade}点\";\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 11-1: 学生データの管理とクエリ\n        List<Student> students = CreateStudentData();\n        \n        Console.WriteLine(\"学生データ管理システム\");\n        Console.WriteLine(\"====================\");\n        \n        // 全学生データの表示\n        Console.WriteLine(\"\\n=== 全学生データ ===\");\n        foreach (var student in students)\n        {\n            Console.WriteLine(student);\n        }\n        \n        // クエリ1: 成績が80点以上の学生\n        Console.WriteLine(\"\\n=== 成績80点以上の学生 ===\");\n        var highPerformers = students.Where(s => s.Grade >= 80);\n        foreach (var student in highPerformers)\n        {\n            Console.WriteLine(student);\n        }\n        \n        // クエリ2: 年齢でグループ化\n        Console.WriteLine(\"\\n=== 年齢別グループ ===\");\n        var ageGroups = students.GroupBy(s => s.Age);\n        foreach (var group in ageGroups)\n        {\n            Console.WriteLine($\"{group.Key}歳: {group.Count()}人\");\n            foreach (var student in group)\n            {\n                Console.WriteLine($\"  - {student.Name} ({student.Subject}: {student.Grade}点)\");\n            }\n        }\n        \n        // クエリ3: 科目別の平均成績\n        Console.WriteLine(\"\\n=== 科目別平均成績 ===\");\n        var subjectAverages = students\n            .GroupBy(s => s.Subject)\n            .Select(g => new \n            {\n                Subject = g.Key,\n                Average = g.Average(s => s.Grade),\n                Count = g.Count()\n            });\n        \n        foreach (var avg in subjectAverages)\n        {\n            Console.WriteLine($\"{avg.Subject}: 平均{avg.Average:F1}点 ({avg.Count}人)\");\n        }\n        \n        // クエリ4: 名前に特定の文字が含まれる学生\n        Console.WriteLine(\"\\n=== 名前に「田」が含まれる学生 ===\");\n        var nameFilter = students.Where(s => s.Name.Contains(\"田\"));\n        foreach (var student in nameFilter)\n        {\n            Console.WriteLine(student);\n        }\n        \n        // 統計情報\n        Console.WriteLine(\"\\n=== 統計情報 ===\");\n        Console.WriteLine($\"総学生数: {students.Count}人\");\n        Console.WriteLine($\"最高成績: {students.Max(s => s.Grade)}点\");\n        Console.WriteLine($\"最低成績: {students.Min(s => s.Grade)}点\");\n        Console.WriteLine($\"平均成績: {students.Average(s => s.Grade):F1}点\");\n        \n        // 成績上位3名\n        Console.WriteLine(\"\\n=== 成績上位3名 ===\");\n        var top3 = students.OrderByDescending(s => s.Grade).Take(3);\n        int rank = 1;\n        foreach (var student in top3)\n        {\n            Console.WriteLine($\"{rank}位: {student}\");\n            rank++;\n        }\n    }\n    \n    static List<Student> CreateStudentData()\n    {\n        return new List<Student>\n        {\n            new Student(\"田中太郎\", 20, 85.5, \"数学\"),\n            new Student(\"佐藤花子\", 19, 92.0, \"英語\"),\n            new Student(\"鈴木次郎\", 21, 78.3, \"数学\"),\n            new Student(\"田村美咲\", 20, 88.7, \"国語\"),\n            new Student(\"山田健太\", 19, 91.2, \"英語\"),\n            new Student(\"中村真理\", 22, 76.8, \"国語\"),\n            new Student(\"小林誠\", 20, 89.5, \"数学\"),\n            new Student(\"加藤優子\", 21, 94.1, \"英語\"),\n            new Student(\"斎藤大輔\", 19, 82.6, \"国語\"),\n            new Student(\"田口愛\", 20, 87.9, \"数学\")\n        };\n    }\n}"
      },
      {
        "filename": "Problem11-2.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Customer\n{\n    public int CustomerId { get; set; }\n    public string Name { get; set; }\n    public string City { get; set; }\n    \n    public Customer(int customerId, string name, string city)\n    {\n        CustomerId = customerId;\n        Name = name;\n        City = city;\n    }\n}\n\nclass Order\n{\n    public int OrderId { get; set; }\n    public int CustomerId { get; set; }\n    public DateTime OrderDate { get; set; }\n    public decimal TotalAmount { get; set; }\n    \n    public Order(int orderId, int customerId, DateTime orderDate, decimal totalAmount)\n    {\n        OrderId = orderId;\n        CustomerId = customerId;\n        OrderDate = orderDate;\n        TotalAmount = totalAmount;\n    }\n}\n\nclass OrderItem\n{\n    public int OrderId { get; set; }\n    public string ProductName { get; set; }\n    public int Quantity { get; set; }\n    public decimal Price { get; set; }\n    \n    public OrderItem(int orderId, string productName, int quantity, decimal price)\n    {\n        OrderId = orderId;\n        ProductName = productName;\n        Quantity = quantity;\n        Price = price;\n    }\n    \n    public decimal TotalPrice => Quantity * Price;\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 11-2: 注文管理システムの複雑なLINQクエリ\n        Console.WriteLine(\"注文管理システム\");\n        Console.WriteLine(\"================\");\n        \n        var customers = CreateCustomerData();\n        var orders = CreateOrderData();\n        var orderItems = CreateOrderItemData();\n        \n        // クエリ1: 顧客別の注文総額\n        Console.WriteLine(\"\\n=== 顧客別注文総額 ===\");\n        var customerTotals = from customer in customers\n                           join order in orders on customer.CustomerId equals order.CustomerId\n                           group order by new { customer.CustomerId, customer.Name } into g\n                           select new\n                           {\n                               CustomerId = g.Key.CustomerId,\n                               CustomerName = g.Key.Name,\n                               TotalAmount = g.Sum(o => o.TotalAmount),\n                               OrderCount = g.Count()\n                           };\n        \n        foreach (var customer in customerTotals.OrderByDescending(c => c.TotalAmount))\n        {\n            Console.WriteLine($\"{customer.CustomerName}: {customer.TotalAmount:C} ({customer.OrderCount}回注文)\");\n        }\n        \n        // クエリ2: 月別の売上集計\n        Console.WriteLine(\"\\n=== 月別売上集計 ===\");\n        var monthlySales = orders\n            .GroupBy(o => new { o.OrderDate.Year, o.OrderDate.Month })\n            .Select(g => new\n            {\n                Year = g.Key.Year,\n                Month = g.Key.Month,\n                TotalSales = g.Sum(o => o.TotalAmount),\n                OrderCount = g.Count()\n            })\n            .OrderBy(m => m.Year).ThenBy(m => m.Month);\n        \n        foreach (var month in monthlySales)\n        {\n            Console.WriteLine($\"{month.Year}年{month.Month}月: {month.TotalSales:C} ({month.OrderCount}件)\");\n        }\n        \n        // クエリ3: 最も売れている商品トップ5\n        Console.WriteLine(\"\\n=== 人気商品トップ5 ===\");\n        var topProducts = orderItems\n            .GroupBy(item => item.ProductName)\n            .Select(g => new\n            {\n                ProductName = g.Key,\n                TotalQuantity = g.Sum(item => item.Quantity),\n                TotalRevenue = g.Sum(item => item.TotalPrice),\n                OrderCount = g.Count()\n            })\n            .OrderByDescending(p => p.TotalQuantity)\n            .Take(5);\n        \n        int rank = 1;\n        foreach (var product in topProducts)\n        {\n            Console.WriteLine($\"{rank}位: {product.ProductName} - {product.TotalQuantity}個売上 \" +\n                           $\"(売上額: {product.TotalRevenue:C}, {product.OrderCount}回注文)\");\n            rank++;\n        }\n        \n        // クエリ4: 特定の都市（東京）の顧客の注文履歴\n        Console.WriteLine(\"\\n=== 東京の顧客の注文履歴 ===\");\n        var tokyoOrders = from customer in customers\n                         join order in orders on customer.CustomerId equals order.CustomerId\n                         where customer.City == \"東京\"\n                         orderby order.OrderDate descending\n                         select new\n                         {\n                             customer.Name,\n                             order.OrderId,\n                             order.OrderDate,\n                             order.TotalAmount\n                         };\n        \n        foreach (var order in tokyoOrders)\n        {\n            Console.WriteLine($\"{order.Name}: 注文#{order.OrderId} ({order.OrderDate:yyyy/MM/dd}) - {order.TotalAmount:C}\");\n        }\n        \n        // 詳細分析\n        Console.WriteLine(\"\\n=== 詳細分析 ===\");\n        \n        // 平均注文金額\n        var avgOrderAmount = orders.Average(o => o.TotalAmount);\n        Console.WriteLine($\"平均注文金額: {avgOrderAmount:C}\");\n        \n        // 最高額の注文\n        var maxOrder = orders.OrderByDescending(o => o.TotalAmount).First();\n        var maxOrderCustomer = customers.First(c => c.CustomerId == maxOrder.CustomerId);\n        Console.WriteLine($\"最高額注文: {maxOrder.TotalAmount:C} ({maxOrderCustomer.Name}様)\");\n        \n        // 都市別の顧客数と平均注文金額\n        Console.WriteLine(\"\\n=== 都市別統計 ===\");\n        var cityStats = from customer in customers\n                       join order in orders on customer.CustomerId equals order.CustomerId\n                       group order by customer.City into g\n                       select new\n                       {\n                           City = g.Key,\n                           CustomerCount = g.Select(o => o.CustomerId).Distinct().Count(),\n                           AverageOrderAmount = g.Average(o => o.TotalAmount),\n                           TotalOrders = g.Count()\n                       };\n        \n        foreach (var stat in cityStats.OrderByDescending(s => s.AverageOrderAmount))\n        {\n            Console.WriteLine($\"{stat.City}: {stat.CustomerCount}人, 平均注文額{stat.AverageOrderAmount:C}, \" +\n                           $\"総注文数{stat.TotalOrders}件\");\n        }\n    }\n    \n    static List<Customer> CreateCustomerData()\n    {\n        return new List<Customer>\n        {\n            new Customer(1, \"田中太郎\", \"東京\"),\n            new Customer(2, \"佐藤花子\", \"大阪\"),\n            new Customer(3, \"鈴木次郎\", \"東京\"),\n            new Customer(4, \"田村美咲\", \"名古屋\"),\n            new Customer(5, \"山田健太\", \"福岡\"),\n            new Customer(6, \"中村真理\", \"東京\"),\n            new Customer(7, \"小林誠\", \"大阪\"),\n            new Customer(8, \"加藤優子\", \"横浜\")\n        };\n    }\n    \n    static List<Order> CreateOrderData()\n    {\n        return new List<Order>\n        {\n            new Order(1001, 1, new DateTime(2024, 1, 15), 15000),\n            new Order(1002, 2, new DateTime(2024, 1, 20), 8500),\n            new Order(1003, 1, new DateTime(2024, 2, 3), 12000),\n            new Order(1004, 3, new DateTime(2024, 2, 10), 25000),\n            new Order(1005, 4, new DateTime(2024, 2, 15), 18000),\n            new Order(1006, 2, new DateTime(2024, 3, 1), 9500),\n            new Order(1007, 5, new DateTime(2024, 3, 8), 22000),\n            new Order(1008, 6, new DateTime(2024, 3, 12), 13500),\n            new Order(1009, 1, new DateTime(2024, 4, 5), 16500),\n            new Order(1010, 7, new DateTime(2024, 4, 18), 11000),\n            new Order(1011, 8, new DateTime(2024, 4, 25), 19500),\n            new Order(1012, 3, new DateTime(2024, 5, 2), 14000)\n        };\n    }\n    \n    static List<OrderItem> CreateOrderItemData()\n    {\n        return new List<OrderItem>\n        {\n            new OrderItem(1001, \"ノートPC\", 1, 12000),\n            new OrderItem(1001, \"マウス\", 1, 3000),\n            new OrderItem(1002, \"キーボード\", 2, 4250),\n            new OrderItem(1003, \"モニター\", 1, 12000),\n            new OrderItem(1004, \"ノートPC\", 2, 12500),\n            new OrderItem(1005, \"タブレット\", 2, 9000),\n            new OrderItem(1006, \"スピーカー\", 1, 9500),\n            new OrderItem(1007, \"ノートPC\", 1, 12000),\n            new OrderItem(1007, \"マウス\", 2, 3000),\n            new OrderItem(1007, \"キーボード\", 1, 4000),\n            new OrderItem(1008, \"モニター\", 1, 13500),\n            new OrderItem(1009, \"タブレット\", 1, 9000),\n            new OrderItem(1009, \"スピーカー\", 1, 7500),\n            new OrderItem(1010, \"キーボード\", 1, 4000),\n            new OrderItem(1010, \"マウス\", 2, 3500),\n            new OrderItem(1011, \"ノートPC\", 1, 12000),\n            new OrderItem(1011, \"モニター\", 1, 7500),\n            new OrderItem(1012, \"タブレット\", 1, 9000),\n            new OrderItem(1012, \"スピーカー\", 1, 5000)\n        };\n    }\n}"
      },
      {
        "filename": "Problem11-3.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nclass Program\n{\n    static void Main()\n    {\n        // 問題 11-3: テキスト分析ツール\n        Console.WriteLine(\"テキスト分析ツール\");\n        Console.WriteLine(\"==================\");\n        \n        string sampleText = @\"\n        プログラミングは創造的な活動です。コンピュータと人間の間の橋渡しをする重要な技術です。\n        C#は強力なプログラミング言語であり、様々なアプリケーション開発に使用されています。\n        オブジェクト指向プログラミングの概念を理解することで、より効率的で保守性の高いコードを書くことができます。\n        継承、ポリモーフィズム、カプセル化といった概念は、複雑なソフトウェアシステムを構築する上で不可欠です。\n        LINQ（Language Integrated Query）は、データ操作を簡潔に記述できる便利な機能です。\n        例外処理により、プログラムの安定性と信頼性を向上させることができます。\n        \";\n        \n        Console.WriteLine(\"分析対象のテキスト:\");\n        Console.WriteLine(sampleText.Trim());\n        Console.WriteLine(\"\\n\" + new string('=', 50));\n        \n        // テキストを単語に分割\n        var words = ExtractWords(sampleText);\n        \n        // 分析1: 単語の出現頻度\n        Console.WriteLine(\"\\n=== 単語の出現頻度（上位10位） ===\");\n        var wordFrequency = words\n            .GroupBy(word => word.ToLower())\n            .Select(g => new { Word = g.Key, Count = g.Count() })\n            .OrderByDescending(w => w.Count)\n            .Take(10);\n        \n        foreach (var freq in wordFrequency)\n        {\n            Console.WriteLine($\"{freq.Word}: {freq.Count}回\");\n        }\n        \n        // 分析2: 最も長い単語と短い単語\n        Console.WriteLine(\"\\n=== 単語の長さ分析 ===\");\n        var distinctWords = words.Distinct(StringComparer.OrdinalIgnoreCase).ToList();\n        \n        var longestWord = distinctWords.OrderByDescending(w => w.Length).First();\n        var shortestWord = distinctWords.OrderBy(w => w.Length).First();\n        var averageLength = distinctWords.Average(w => w.Length);\n        \n        Console.WriteLine($\"最も長い単語: {longestWord} ({longestWord.Length}文字)\");\n        Console.WriteLine($\"最も短い単語: {shortestWord} ({shortestWord.Length}文字)\");\n        Console.WriteLine($\"平均文字数: {averageLength:F1}文字\");\n        \n        // 分析3: 特定の長さの単語をフィルタリング\n        Console.WriteLine(\"\\n=== 5文字以上の単語 ===\");\n        var longWords = distinctWords\n            .Where(w => w.Length >= 5)\n            .OrderByDescending(w => w.Length)\n            .ThenBy(w => w);\n        \n        foreach (var word in longWords)\n        {\n            Console.WriteLine($\"{word} ({word.Length}文字)\");\n        }\n        \n        // 分析4: 文字数でグループ化した単語の統計\n        Console.WriteLine(\"\\n=== 文字数別統計 ===\");\n        var lengthGroups = distinctWords\n            .GroupBy(w => w.Length)\n            .Select(g => new\n            {\n                Length = g.Key,\n                Count = g.Count(),\n                Words = g.OrderBy(w => w).ToList(),\n                Percentage = (g.Count() * 100.0 / distinctWords.Count)\n            })\n            .OrderBy(g => g.Length);\n        \n        foreach (var group in lengthGroups)\n        {\n            Console.WriteLine($\"{group.Length}文字: {group.Count}個 ({group.Percentage:F1}%)\");\n            Console.WriteLine($\"  単語: {string.Join(\", \", group.Words)}\");\n        }\n        \n        // 分析5: 文字別の出現頻度\n        Console.WriteLine(\"\\n=== 文字出現頻度（上位10位） ===\");\n        var charFrequency = sampleText\n            .Where(c => char.IsLetter(c))\n            .GroupBy(c => c)\n            .Select(g => new { Char = g.Key, Count = g.Count() })\n            .OrderByDescending(c => c.Count)\n            .Take(10);\n        \n        foreach (var freq in charFrequency)\n        {\n            Console.WriteLine($\"{freq.Char}: {freq.Count}回\");\n        }\n        \n        // 分析6: 高度な分析\n        Console.WriteLine(\"\\n=== 高度な分析 ===\");\n        \n        // 特定のパターンの単語を検索\n        var programmingTerms = words\n            .Where(w => w.Contains(\"プログラム\") || w.Contains(\"コード\") || w.Contains(\"システム\"))\n            .Distinct(StringComparer.OrdinalIgnoreCase)\n            .ToList();\n        \n        Console.WriteLine($\"プログラミング関連用語: {string.Join(\", \", programmingTerms)}\");\n        \n        // 母音の多い単語\n        var vowelCounts = distinctWords\n            .Select(w => new\n            {\n                Word = w,\n                VowelCount = w.Count(c => \"あいうえおアイウエオ\".Contains(c))\n            })\n            .Where(w => w.VowelCount > 0)\n            .OrderByDescending(w => w.VowelCount)\n            .Take(5);\n        \n        Console.WriteLine(\"\\n母音の多い単語（上位5位）:\");\n        foreach (var item in vowelCounts)\n        {\n            Console.WriteLine($\"{item.Word}: {item.VowelCount}個の母音\");\n        }\n        \n        // 全体統計\n        Console.WriteLine(\"\\n=== 全体統計 ===\");\n        Console.WriteLine($\"総文字数: {sampleText.Length}文字\");\n        Console.WriteLine($\"総単語数: {words.Count}語\");\n        Console.WriteLine($\"ユニーク単語数: {distinctWords.Count}語\");\n        Console.WriteLine($\"平均単語長: {words.Average(w => w.Length):F1}文字\");\n        \n        // 文の数を数える\n        var sentences = sampleText.Split(new char[] { '。', '.' }, StringSplitOptions.RemoveEmptyEntries);\n        Console.WriteLine($\"文の数: {sentences.Length}文\");\n        Console.WriteLine($\"1文あたりの平均単語数: {words.Count / (double)sentences.Length:F1}語\");\n    }\n    \n    static List<string> ExtractWords(string text)\n    {\n        // 日本語と英語の単語を抽出\n        // ひらがな、カタカナ、漢字、英字の連続を単語として認識\n        var pattern = @\"[ひらがなカタカナ漢字a-zA-Zー]+\";\n        var regex = new Regex(pattern);\n        \n        // Unicode範囲を使った正規表現パターン\n        var japanesePattern = @\"[\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FAF\\u3005\\u3006\\u30FC\\u30FEa-zA-Z]+\";\n        var japaneseRegex = new Regex(japanesePattern);\n        \n        var matches = japaneseRegex.Matches(text);\n        var words = new List<string>();\n        \n        foreach (Match match in matches)\n        {\n            string word = match.Value.Trim();\n            if (word.Length > 0)\n            {\n                words.Add(word);\n            }\n        }\n        \n        return words;\n    }\n}"
      }
    ]
  },
  {
    "id": "exercise12",
    "directory": "Exercise12",
    "title": "Exercise 12: 非同期プログラミング (難易度: 5)",
    "difficulty": 5,
    "description": "C#の非同期プログラミング（async/await）について学習します。",
    "readme": "# Exercise 12: 非同期プログラミング (難易度: 5)\n\n## 概要\nC#の非同期プログラミング（async/await）について学習します。\n\n## 問題\n\n### 問題 12-1 (難易度: 5)\nファイルダウンロードシミュレーターを作成してください。\n\n**要求事項:**\n- 複数のファイルを非同期でダウンロードするシミュレーション\n- Task.Delay()を使用してダウンロード時間をシミュレート\n- プログレス表示機能\n- タイムアウト処理\n- 並行処理と逐次処理の性能比較\n\n### 問題 12-2 (難易度: 5)\n非同期データ処理パイプラインを作成してください。\n\n**要求事項:**\n- データ取得、変換、保存の非同期パイプライン\n- IAsyncEnumerable を使用したストリーミング処理\n- CancellationToken による処理の中断機能\n- 例外処理とリトライ機能\n- バッチ処理とストリーム処理の実装\n\n### 問題 12-3 (難易度: 5)\nWebクライアントシミュレーターを作成してください。\n\n**要求事項:**\n- 複数のAPIエンドポイントへの同時リクエスト\n- レスポンス時間の測定\n- 失敗時の自動リトライ\n- レート制限の実装\n- 結果の集計とレポート機能",
    "solutions": [
      {
        "filename": "Problem12-1.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass FileDownloadSimulator\n{\n    private readonly Random random = new Random();\n    \n    public async Task<string> DownloadFileAsync(string fileName, int sizeMB, IProgress<int> progress = null, CancellationToken cancellationToken = default)\n    {\n        var sw = Stopwatch.StartNew();\n        \n        try\n        {\n            Console.WriteLine($\"ダウンロード開始: {fileName} ({sizeMB}MB)\");\n            \n            // ダウンロード時間をシミュレート（1MBあたり100-500ms）\n            int totalTime = sizeMB * random.Next(100, 500);\n            \n            for (int i = 0; i <= 100; i += 10)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                \n                await Task.Delay(totalTime / 10, cancellationToken);\n                progress?.Report(i);\n            }\n            \n            sw.Stop();\n            string result = $\"{fileName}: 完了 ({sw.ElapsedMilliseconds}ms)\";\n            Console.WriteLine(result);\n            return result;\n        }\n        catch (OperationCanceledException)\n        {\n            Console.WriteLine($\"{fileName}: キャンセルされました\");\n            throw;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"{fileName}: エラー - {ex.Message}\");\n            throw;\n        }\n    }\n    \n    public async Task<List<string>> DownloadFilesSequentiallyAsync(List<(string name, int size)> files)\n    {\n        var results = new List<string>();\n        var sw = Stopwatch.StartNew();\n        \n        Console.WriteLine(\"\\n=== 逐次ダウンロード開始 ===\");\n        \n        foreach (var file in files)\n        {\n            try\n            {\n                var result = await DownloadFileAsync(file.name, file.size);\n                results.Add(result);\n            }\n            catch (Exception ex)\n            {\n                results.Add($\"{file.name}: 失敗 - {ex.Message}\");\n            }\n        }\n        \n        sw.Stop();\n        Console.WriteLine($\"逐次ダウンロード完了: {sw.ElapsedMilliseconds}ms\");\n        return results;\n    }\n    \n    public async Task<List<string>> DownloadFilesConcurrentlyAsync(List<(string name, int size)> files)\n    {\n        var sw = Stopwatch.StartNew();\n        \n        Console.WriteLine(\"\\n=== 並行ダウンロード開始 ===\");\n        \n        var tasks = new List<Task<string>>();\n        \n        foreach (var file in files)\n        {\n            var progress = new Progress<int>(percentage => \n                Console.WriteLine($\"{file.name}: {percentage}%\"));\n            \n            tasks.Add(DownloadFileAsync(file.name, file.size, progress));\n        }\n        \n        try\n        {\n            var results = await Task.WhenAll(tasks);\n            sw.Stop();\n            Console.WriteLine($\"並行ダウンロード完了: {sw.ElapsedMilliseconds}ms\");\n            return new List<string>(results);\n        }\n        catch (Exception)\n        {\n            sw.Stop();\n            Console.WriteLine($\"並行ダウンロード完了（一部失敗）: {sw.ElapsedMilliseconds}ms\");\n            \n            var results = new List<string>();\n            foreach (var task in tasks)\n            {\n                try\n                {\n                    results.Add(await task);\n                }\n                catch (Exception ex)\n                {\n                    results.Add($\"失敗: {ex.Message}\");\n                }\n            }\n            return results;\n        }\n    }\n    \n    public async Task<List<string>> DownloadFilesWithTimeoutAsync(List<(string name, int size)> files, TimeSpan timeout)\n    {\n        var sw = Stopwatch.StartNew();\n        \n        Console.WriteLine($\"\\n=== タイムアウト付きダウンロード開始 (制限時間: {timeout.TotalSeconds}秒) ===\");\n        \n        using (var cts = new CancellationTokenSource(timeout))\n        {\n            try\n            {\n                var tasks = new List<Task<string>>();\n                \n                foreach (var file in files)\n                {\n                    tasks.Add(DownloadFileAsync(file.name, file.size, null, cts.Token));\n                }\n                \n                var results = await Task.WhenAll(tasks);\n                sw.Stop();\n                Console.WriteLine($\"タイムアウト付きダウンロード完了: {sw.ElapsedMilliseconds}ms\");\n                return new List<string>(results);\n            }\n            catch (OperationCanceledException)\n            {\n                sw.Stop();\n                Console.WriteLine($\"タイムアウトによりダウンロード中断: {sw.ElapsedMilliseconds}ms\");\n                return new List<string> { \"タイムアウトエラー\" };\n            }\n        }\n    }\n}\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // 問題 12-1: ファイルダウンロードシミュレーター\n        Console.WriteLine(\"ファイルダウンロードシミュレーター\");\n        Console.WriteLine(\"==============================\");\n        \n        var simulator = new FileDownloadSimulator();\n        \n        var files = new List<(string name, int size)>\n        {\n            (\"document.pdf\", 5),\n            (\"video.mp4\", 20),\n            (\"music.mp3\", 8),\n            (\"image.jpg\", 3),\n            (\"software.zip\", 15)\n        };\n        \n        // 単一ファイルのダウンロード（プログレス表示付き）\n        Console.WriteLine(\"\\n=== 単一ファイルダウンロード ===\");\n        var progress = new Progress<int>(percentage => \n            Console.WriteLine($\"プログレス: {percentage}%\"));\n        \n        await simulator.DownloadFileAsync(\"sample.zip\", 10, progress);\n        \n        // 逐次ダウンロード\n        var sequentialResults = await simulator.DownloadFilesSequentiallyAsync(files);\n        \n        // 並行ダウンロード\n        var concurrentResults = await simulator.DownloadFilesConcurrentlyAsync(files);\n        \n        // タイムアウト付きダウンロード\n        var timeoutResults = await simulator.DownloadFilesWithTimeoutAsync(files, TimeSpan.FromSeconds(3));\n        \n        // 結果の比較\n        Console.WriteLine(\"\\n=== 結果比較 ===\");\n        Console.WriteLine(\"逐次ダウンロード結果:\");\n        foreach (var result in sequentialResults)\n        {\n            Console.WriteLine($\"  {result}\");\n        }\n        \n        Console.WriteLine(\"\\n並行ダウンロード結果:\");\n        foreach (var result in concurrentResults)\n        {\n            Console.WriteLine($\"  {result}\");\n        }\n        \n        Console.WriteLine(\"\\nタイムアウト付きダウンロード結果:\");\n        foreach (var result in timeoutResults)\n        {\n            Console.WriteLine($\"  {result}\");\n        }\n        \n        // パフォーマンスの説明\n        Console.WriteLine(\"\\n=== パフォーマンス分析 ===\");\n        Console.WriteLine(\"逐次処理: ファイルを一つずつ順番にダウンロード\");\n        Console.WriteLine(\"並行処理: 複数のファイルを同時にダウンロード\");\n        Console.WriteLine(\"→ 並行処理の方が全体的な処理時間が短縮される\");\n        Console.WriteLine(\"→ ただし、リソース使用量は増加する\");\n    }\n}"
      },
      {
        "filename": "Problem12-2.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Linq;\n\n// データ処理用のモデルクラス\nclass DataItem\n{\n    public int Id { get; set; }\n    public string Data { get; set; }\n    public DateTime Timestamp { get; set; }\n    \n    public DataItem(int id, string data)\n    {\n        Id = id;\n        Data = data;\n        Timestamp = DateTime.Now;\n    }\n    \n    public override string ToString()\n    {\n        return $\"ID:{Id}, Data:{Data}, Time:{Timestamp:HH:mm:ss}\";\n    }\n}\n\nclass ProcessedData\n{\n    public int Id { get; set; }\n    public string ProcessedValue { get; set; }\n    public DateTime ProcessingTime { get; set; }\n    public TimeSpan ProcessingDuration { get; set; }\n    \n    public override string ToString()\n    {\n        return $\"ID:{Id}, Processed:{ProcessedValue}, Duration:{ProcessingDuration.TotalMilliseconds}ms\";\n    }\n}\n\nclass AsyncDataProcessor\n{\n    private readonly Random random = new Random();\n    private int retryCount = 0;\n    \n    // データ取得の非同期ストリーム\n    public async IAsyncEnumerable<DataItem> GenerateDataAsync(int count, \n        [System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken cancellationToken = default)\n    {\n        Console.WriteLine($\"データ生成開始: {count}件\");\n        \n        for (int i = 1; i <= count; i++)\n        {\n            cancellationToken.ThrowIfCancellationRequested();\n            \n            // データ生成の遅延をシミュレート\n            await Task.Delay(random.Next(50, 200), cancellationToken);\n            \n            var data = new DataItem(i, $\"データ_{i}_{random.Next(1000, 9999)}\");\n            Console.WriteLine($\"生成: {data}\");\n            \n            yield return data;\n        }\n        \n        Console.WriteLine(\"データ生成完了\");\n    }\n    \n    // データ変換処理\n    public async Task<ProcessedData> TransformDataAsync(DataItem input, CancellationToken cancellationToken = default)\n    {\n        var startTime = DateTime.Now;\n        \n        try\n        {\n            // 変換処理の遅延をシミュレート\n            await Task.Delay(random.Next(100, 500), cancellationToken);\n            \n            // 時々エラーを発生させる（リトライのテスト用）\n            if (random.Next(1, 10) > 8)\n            {\n                throw new InvalidOperationException($\"データ変換エラー (ID: {input.Id})\");\n            }\n            \n            var result = new ProcessedData\n            {\n                Id = input.Id,\n                ProcessedValue = $\"変換済み_{input.Data.ToUpper()}\",\n                ProcessingTime = DateTime.Now,\n                ProcessingDuration = DateTime.Now - startTime\n            };\n            \n            Console.WriteLine($\"変換完了: {result}\");\n            return result;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"変換エラー: {ex.Message}\");\n            throw;\n        }\n    }\n    \n    // リトライ機能付きデータ変換\n    public async Task<ProcessedData> TransformDataWithRetryAsync(DataItem input, int maxRetries = 3, CancellationToken cancellationToken = default)\n    {\n        for (int attempt = 1; attempt <= maxRetries; attempt++)\n        {\n            try\n            {\n                return await TransformDataAsync(input, cancellationToken);\n            }\n            catch (Exception ex) when (attempt < maxRetries)\n            {\n                retryCount++;\n                Console.WriteLine($\"リトライ {attempt}/{maxRetries}: {ex.Message}\");\n                await Task.Delay(TimeSpan.FromMilliseconds(attempt * 100), cancellationToken);\n            }\n        }\n        \n        // 最大リトライ回数に達した場合は最後にもう一度試行\n        return await TransformDataAsync(input, cancellationToken);\n    }\n    \n    // データ保存処理\n    public async Task SaveDataAsync(ProcessedData data, CancellationToken cancellationToken = default)\n    {\n        cancellationToken.ThrowIfCancellationRequested();\n        \n        // 保存処理の遅延をシミュレート\n        await Task.Delay(random.Next(50, 150), cancellationToken);\n        \n        Console.WriteLine($\"保存完了: ID:{data.Id}\");\n    }\n    \n    // バッチ処理パイプライン\n    public async Task<List<ProcessedData>> ProcessBatchAsync(int dataCount, CancellationToken cancellationToken = default)\n    {\n        Console.WriteLine(\"\\n=== バッチ処理開始 ===\");\n        var results = new List<ProcessedData>();\n        \n        try\n        {\n            await foreach (var item in GenerateDataAsync(dataCount, cancellationToken))\n            {\n                var processed = await TransformDataWithRetryAsync(item, 3, cancellationToken);\n                await SaveDataAsync(processed, cancellationToken);\n                results.Add(processed);\n            }\n        }\n        catch (OperationCanceledException)\n        {\n            Console.WriteLine(\"バッチ処理がキャンセルされました\");\n            throw;\n        }\n        \n        Console.WriteLine($\"バッチ処理完了: {results.Count}件処理\");\n        return results;\n    }\n    \n    // ストリーム処理パイプライン\n    public async Task ProcessStreamAsync(int dataCount, int concurrency = 3, CancellationToken cancellationToken = default)\n    {\n        Console.WriteLine($\"\\n=== ストリーム処理開始 (並行度: {concurrency}) ===\");\n        \n        var semaphore = new SemaphoreSlim(concurrency, concurrency);\n        var tasks = new List<Task>();\n        \n        try\n        {\n            await foreach (var item in GenerateDataAsync(dataCount, cancellationToken))\n            {\n                var task = ProcessSingleItemAsync(item, semaphore, cancellationToken);\n                tasks.Add(task);\n            }\n            \n            await Task.WhenAll(tasks);\n        }\n        catch (OperationCanceledException)\n        {\n            Console.WriteLine(\"ストリーム処理がキャンセルされました\");\n            throw;\n        }\n        \n        Console.WriteLine(\"ストリーム処理完了\");\n    }\n    \n    private async Task ProcessSingleItemAsync(DataItem item, SemaphoreSlim semaphore, CancellationToken cancellationToken)\n    {\n        await semaphore.WaitAsync(cancellationToken);\n        \n        try\n        {\n            var processed = await TransformDataWithRetryAsync(item, 3, cancellationToken);\n            await SaveDataAsync(processed, cancellationToken);\n        }\n        finally\n        {\n            semaphore.Release();\n        }\n    }\n    \n    public void DisplayStatistics()\n    {\n        Console.WriteLine($\"\\n=== 統計情報 ===\");\n        Console.WriteLine($\"総リトライ回数: {retryCount}\");\n    }\n}\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // 問題 12-2: 非同期データ処理パイプライン\n        Console.WriteLine(\"非同期データ処理パイプライン\");\n        Console.WriteLine(\"==========================\");\n        \n        var processor = new AsyncDataProcessor();\n        \n        // キャンセレーショントークンの設定\n        using var cts = new CancellationTokenSource();\n        \n        // 10秒後に自動キャンセル\n        cts.CancelAfter(TimeSpan.FromSeconds(10));\n        \n        try\n        {\n            // バッチ処理のテスト\n            var batchResults = await processor.ProcessBatchAsync(5, cts.Token);\n            \n            Console.WriteLine(\"\\nバッチ処理結果:\");\n            foreach (var result in batchResults)\n            {\n                Console.WriteLine($\"  {result}\");\n            }\n            \n            // ストリーム処理のテスト\n            await processor.ProcessStreamAsync(5, 2, cts.Token);\n            \n            processor.DisplayStatistics();\n        }\n        catch (OperationCanceledException)\n        {\n            Console.WriteLine(\"\\n処理がタイムアウトによりキャンセルされました\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"\\nエラーが発生しました: {ex.Message}\");\n        }\n        \n        // 手動キャンセルのデモ\n        Console.WriteLine(\"\\n=== 手動キャンセルのデモ ===\");\n        Console.WriteLine(\"5秒後にEnterキーを押すとキャンセルされます\");\n        \n        using var manualCts = new CancellationTokenSource();\n        \n        // バックグラウンドでキャンセル監視\n        _ = Task.Run(async () =>\n        {\n            await Task.Delay(5000);\n            Console.WriteLine(\"5秒経過 - Enterキーでキャンセル可能\");\n            Console.ReadLine();\n            manualCts.Cancel();\n            Console.WriteLine(\"キャンセル要求を送信しました\");\n        });\n        \n        try\n        {\n            await processor.ProcessBatchAsync(10, manualCts.Token);\n        }\n        catch (OperationCanceledException)\n        {\n            Console.WriteLine(\"手動キャンセルが実行されました\");\n        }\n        \n        Console.WriteLine(\"\\nプログラム終了\");\n    }\n}"
      },
      {
        "filename": "Problem12-3.cs",
        "content": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Linq;\n\n// API レスポンスモデル\nclass ApiResponse\n{\n    public string Endpoint { get; set; }\n    public bool IsSuccess { get; set; }\n    public string Data { get; set; }\n    public TimeSpan ResponseTime { get; set; }\n    public string ErrorMessage { get; set; }\n    public int StatusCode { get; set; }\n    \n    public override string ToString()\n    {\n        return IsSuccess \n            ? $\"{Endpoint}: 成功 ({ResponseTime.TotalMilliseconds:F0}ms)\"\n            : $\"{Endpoint}: 失敗 ({ErrorMessage})\";\n    }\n}\n\n// レート制限管理\nclass RateLimiter\n{\n    private readonly SemaphoreSlim semaphore;\n    private readonly Timer resetTimer;\n    private readonly int maxRequests;\n    private readonly TimeSpan timeWindow;\n    \n    public RateLimiter(int maxRequests, TimeSpan timeWindow)\n    {\n        this.maxRequests = maxRequests;\n        this.timeWindow = timeWindow;\n        this.semaphore = new SemaphoreSlim(maxRequests, maxRequests);\n        \n        // 定期的にセマフォをリセット\n        this.resetTimer = new Timer(Reset, null, timeWindow, timeWindow);\n    }\n    \n    public async Task<bool> TryExecuteAsync(Func<Task> action, CancellationToken cancellationToken = default)\n    {\n        if (await semaphore.WaitAsync(0, cancellationToken))\n        {\n            try\n            {\n                await action();\n                return true;\n            }\n            finally\n            {\n                // すぐにはリリースしない（レート制限のため）\n            }\n        }\n        return false;\n    }\n    \n    private void Reset(object state)\n    {\n        // 利用可能なリクエスト数をリセット\n        var currentCount = semaphore.CurrentCount;\n        var toRelease = maxRequests - currentCount;\n        if (toRelease > 0)\n        {\n            semaphore.Release(toRelease);\n        }\n    }\n    \n    public void Dispose()\n    {\n        resetTimer?.Dispose();\n        semaphore?.Dispose();\n    }\n}\n\nclass WebClientSimulator\n{\n    private readonly Random random = new Random();\n    private readonly RateLimiter rateLimiter;\n    \n    public WebClientSimulator()\n    {\n        // 1秒間に最大5リクエストまで\n        rateLimiter = new RateLimiter(5, TimeSpan.FromSeconds(1));\n    }\n    \n    // APIリクエストのシミュレーション\n    public async Task<ApiResponse> SendRequestAsync(string endpoint, int timeoutMs = 5000, CancellationToken cancellationToken = default)\n    {\n        var sw = Stopwatch.StartNew();\n        \n        try\n        {\n            using var timeoutCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);\n            timeoutCts.CancelAfter(timeoutMs);\n            \n            // リクエスト処理時間をシミュレート\n            int responseTime = random.Next(100, 3000);\n            await Task.Delay(responseTime, timeoutCts.Token);\n            \n            // 時々エラーを発生させる\n            if (random.Next(1, 10) > 7)\n            {\n                throw new InvalidOperationException(\"サーバーエラー\");\n            }\n            \n            sw.Stop();\n            \n            return new ApiResponse\n            {\n                Endpoint = endpoint,\n                IsSuccess = true,\n                Data = $\"Response from {endpoint}\",\n                ResponseTime = sw.Elapsed,\n                StatusCode = 200\n            };\n        }\n        catch (OperationCanceledException) when (cancellationToken.IsCancellationRequested)\n        {\n            sw.Stop();\n            return new ApiResponse\n            {\n                Endpoint = endpoint,\n                IsSuccess = false,\n                ErrorMessage = \"リクエストがキャンセルされました\",\n                ResponseTime = sw.Elapsed,\n                StatusCode = 0\n            };\n        }\n        catch (OperationCanceledException)\n        {\n            sw.Stop();\n            return new ApiResponse\n            {\n                Endpoint = endpoint,\n                IsSuccess = false,\n                ErrorMessage = \"タイムアウト\",\n                ResponseTime = sw.Elapsed,\n                StatusCode = 408\n            };\n        }\n        catch (Exception ex)\n        {\n            sw.Stop();\n            return new ApiResponse\n            {\n                Endpoint = endpoint,\n                IsSuccess = false,\n                ErrorMessage = ex.Message,\n                ResponseTime = sw.Elapsed,\n                StatusCode = 500\n            };\n        }\n    }\n    \n    // リトライ機能付きリクエスト\n    public async Task<ApiResponse> SendRequestWithRetryAsync(string endpoint, int maxRetries = 3, CancellationToken cancellationToken = default)\n    {\n        for (int attempt = 1; attempt <= maxRetries; attempt++)\n        {\n            var response = await SendRequestAsync(endpoint, 2000, cancellationToken);\n            \n            if (response.IsSuccess)\n            {\n                return response;\n            }\n            \n            Console.WriteLine($\"リトライ {attempt}/{maxRetries}: {endpoint} - {response.ErrorMessage}\");\n            \n            if (attempt < maxRetries)\n            {\n                // 指数バックオフ\n                var delay = TimeSpan.FromMilliseconds(Math.Pow(2, attempt) * 1000);\n                await Task.Delay(delay, cancellationToken);\n            }\n        }\n        \n        // 最後の試行\n        return await SendRequestAsync(endpoint, 2000, cancellationToken);\n    }\n    \n    // レート制限付きリクエスト\n    public async Task<ApiResponse> SendRequestWithRateLimitAsync(string endpoint, CancellationToken cancellationToken = default)\n    {\n        bool executed = await rateLimiter.TryExecuteAsync(async () =>\n        {\n            // 実際のリクエスト処理は別で実行\n        }, cancellationToken);\n        \n        if (!executed)\n        {\n            return new ApiResponse\n            {\n                Endpoint = endpoint,\n                IsSuccess = false,\n                ErrorMessage = \"レート制限により拒否されました\",\n                StatusCode = 429\n            };\n        }\n        \n        return await SendRequestAsync(endpoint, 3000, cancellationToken);\n    }\n    \n    // 複数のAPIエンドポイントに同時リクエスト\n    public async Task<List<ApiResponse>> SendConcurrentRequestsAsync(List<string> endpoints, CancellationToken cancellationToken = default)\n    {\n        Console.WriteLine($\"\\n=== 同時リクエスト開始 ({endpoints.Count}件) ===\");\n        \n        var tasks = endpoints.Select(endpoint => \n            SendRequestWithRetryAsync(endpoint, 2, cancellationToken)).ToList();\n        \n        var responses = await Task.WhenAll(tasks);\n        \n        Console.WriteLine(\"同時リクエスト完了\");\n        return responses.ToList();\n    }\n    \n    // レート制限テスト\n    public async Task TestRateLimitAsync(List<string> endpoints, CancellationToken cancellationToken = default)\n    {\n        Console.WriteLine($\"\\n=== レート制限テスト開始 ===\");\n        \n        var tasks = endpoints.Select(endpoint =>\n            SendRequestWithRateLimitAsync(endpoint, cancellationToken)).ToList();\n        \n        var responses = await Task.WhenAll(tasks);\n        \n        var rateLimitedCount = responses.Count(r => r.StatusCode == 429);\n        Console.WriteLine($\"レート制限テスト完了 - 制限された要求: {rateLimitedCount}件\");\n        \n        foreach (var response in responses)\n        {\n            Console.WriteLine($\"  {response}\");\n        }\n    }\n    \n    // 結果レポート生成\n    public void GenerateReport(List<ApiResponse> responses)\n    {\n        Console.WriteLine(\"\\n=== レポート ===\");\n        \n        var successCount = responses.Count(r => r.IsSuccess);\n        var failureCount = responses.Count - successCount;\n        var averageResponseTime = responses.Where(r => r.IsSuccess).Average(r => r.ResponseTime.TotalMilliseconds);\n        var maxResponseTime = responses.Max(r => r.ResponseTime.TotalMilliseconds);\n        var minResponseTime = responses.Min(r => r.ResponseTime.TotalMilliseconds);\n        \n        Console.WriteLine($\"総リクエスト数: {responses.Count}\");\n        Console.WriteLine($\"成功: {successCount}件 ({(double)successCount / responses.Count * 100:F1}%)\");\n        Console.WriteLine($\"失敗: {failureCount}件 ({(double)failureCount / responses.Count * 100:F1}%)\");\n        Console.WriteLine($\"平均レスポンス時間: {averageResponseTime:F0}ms\");\n        Console.WriteLine($\"最大レスポンス時間: {maxResponseTime:F0}ms\");\n        Console.WriteLine($\"最小レスポンス時間: {minResponseTime:F0}ms\");\n        \n        // エラーの種類別集計\n        var errorGroups = responses.Where(r => !r.IsSuccess)\n            .GroupBy(r => r.ErrorMessage)\n            .Select(g => new { Error = g.Key, Count = g.Count() });\n        \n        if (errorGroups.Any())\n        {\n            Console.WriteLine(\"\\nエラー種別:\");\n            foreach (var error in errorGroups)\n            {\n                Console.WriteLine($\"  {error.Error}: {error.Count}件\");\n            }\n        }\n        \n        // レスポンス時間の分布\n        var fastRequests = responses.Count(r => r.ResponseTime.TotalMilliseconds < 1000);\n        var mediumRequests = responses.Count(r => r.ResponseTime.TotalMilliseconds >= 1000 && r.ResponseTime.TotalMilliseconds < 2000);\n        var slowRequests = responses.Count(r => r.ResponseTime.TotalMilliseconds >= 2000);\n        \n        Console.WriteLine(\"\\nレスポンス時間分布:\");\n        Console.WriteLine($\"  高速 (<1s): {fastRequests}件\");\n        Console.WriteLine($\"  中程度 (1-2s): {mediumRequests}件\");\n        Console.WriteLine($\"  低速 (>=2s): {slowRequests}件\");\n    }\n    \n    public void Dispose()\n    {\n        rateLimiter?.Dispose();\n    }\n}\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // 問題 12-3: Webクライアントシミュレーター\n        Console.WriteLine(\"Webクライアントシミュレーター\");\n        Console.WriteLine(\"============================\");\n        \n        using var simulator = new WebClientSimulator();\n        \n        var endpoints = new List<string>\n        {\n            \"/api/users\",\n            \"/api/products\",\n            \"/api/orders\",\n            \"/api/inventory\",\n            \"/api/analytics\",\n            \"/api/reports\",\n            \"/api/settings\",\n            \"/api/notifications\"\n        };\n        \n        using var cts = new CancellationTokenSource();\n        cts.CancelAfter(TimeSpan.FromSeconds(30)); // 30秒でタイムアウト\n        \n        try\n        {\n            // 単一リクエストのテスト\n            Console.WriteLine(\"=== 単一リクエストテスト ===\");\n            var singleResponse = await simulator.SendRequestAsync(\"/api/test\");\n            Console.WriteLine(singleResponse);\n            \n            // リトライ機能のテスト\n            Console.WriteLine(\"\\n=== リトライ機能テスト ===\");\n            var retryResponse = await simulator.SendRequestWithRetryAsync(\"/api/unstable\", 3, cts.Token);\n            Console.WriteLine(retryResponse);\n            \n            // 同時リクエストのテスト\n            var responses = await simulator.SendConcurrentRequestsAsync(endpoints, cts.Token);\n            \n            // レート制限のテスト\n            await simulator.TestRateLimitAsync(endpoints.Take(10).ToList(), cts.Token);\n            \n            // レポート生成\n            simulator.GenerateReport(responses);\n        }\n        catch (OperationCanceledException)\n        {\n            Console.WriteLine(\"\\nタイムアウトによりプログラムが中断されました\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"\\nエラーが発生しました: {ex.Message}\");\n        }\n        \n        Console.WriteLine(\"\\nプログラム終了\");\n    }\n}"
      }
    ]
  }
]